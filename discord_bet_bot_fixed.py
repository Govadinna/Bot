import os
import threading
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_flask).start()

import os
import time
from typing import Optional, List, Tuple
import discord
from discord.ext import commands
from discord import app_commands
from supabase import create_client, Client
import logging
import asyncio
from dotenv import load_dotenv
from functools import wraps
from discord.ui import View, Button, Modal, TextInput
import random
import aiohttp
import re
# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Explicitly load .env file from the script's directory
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
dotenv_path = os.path.join(BASE_DIR, '.env')

if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    logger.info(f".env loaded from {dotenv_path}")
else:
    logger.warning(f".env file not found at {dotenv_path}. Relying on environment variables.")

# Environment variables (—Ç–µ–ø–µ—Ä—å –±–µ–∑ exit, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ª–æ–≥–≥–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç)
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
DEFAULT_BURN = float(os.getenv("DEFAULT_BURN", "0.25"))
TEAM_ANNOUNCEMENT_CHANNEL = os.getenv("TEAM_ANNOUNCEMENT_CHANNEL")

# –î–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ exit ‚Äî –ø—É—Å—Ç—å –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∞—Ö
if not DISCORD_BOT_TOKEN:
    logger.error("DISCORD_BOT_TOKEN environment variable is missing or empty")
    # –ù–µ exit, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç: bot.run –Ω–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è –Ω–∏–∂–µ
if not SUPABASE_URL or not SUPABASE_KEY:
    logger.error("SUPABASE_URL or SUPABASE_KEY environment variable is missing or empty")

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Discord bot setup
INTENTS = discord.Intents.default()
INTENTS.message_content = False
INTENTS.members = True
bot = commands.Bot(command_prefix="!", intents=INTENTS)
balance_lock = asyncio.Lock()

def safe_int(value, min_value=0, max_value=2**63 - 1):
    try:
        val = int(value)
        if val < min_value:
            raise ValueError(f"Value too small (min {min_value})")
        if val > max_value:
            raise ValueError("Value too large")
        return val
    except (ValueError, TypeError):
        raise ValueError("Invalid integer value")
    
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    @wraps(func)
    async def wrapper(interaction: discord.Interaction, *args, **kwargs):
        if interaction.guild is None:
            await interaction.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        if not interaction.user.guild_permissions.manage_guild:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
            return
        return await func(interaction, *args, **kwargs)
    return wrapper

# ---------------------- DB HELPERS ----------------------

def get_rank_emoji(mmr: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ MMR (–¥–∏–∞–ø–∞–∑–æ–Ω—ã Dota 2)."""
    if mmr == 0 or mmr < 770:
        return "üêõ Herald"  # –ß–µ—Ä–≤—è–∫ –¥–ª—è Herald (Tango)
    elif 770 <= mmr < 1540:
        return "üõ°Ô∏è Guardian"  # –©–∏—Ç –¥–ª—è Guardian
    elif 1540 <= mmr < 2310:
        return "‚öîÔ∏è Crusader"  # –ú–µ—á –¥–ª—è Crusader (—Ç–≤–æ–π —Ä–∞–Ω–≥!)
    elif 2310 <= mmr < 3080:
        return "üèõÔ∏è Archon"  # –ö–æ–ª–æ–Ω–Ω–∞ –¥–ª—è Archon
    elif 3080 <= mmr < 3850:
        return "üëë Legend"  # –ö–æ—Ä–æ–Ω–∞ –¥–ª—è Legend
    elif 3850 <= mmr < 4620:
        return "üè∫ Ancient"  # –í–∞–∑–∞ –¥–ª—è Ancient
    elif 4620 <= mmr < 6000:
        return "‚ú® Divine"  # –ó–≤–µ–∑–¥–∞ –¥–ª—è Divine
    else:
        return "‚ò†Ô∏è Immortal"  # –ß–µ—Ä–µ–ø –¥–ª—è Immortal (—ç–ª–∏—Ç–∞)
    
def get_rank_emoji_from_tier(rank_tier: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ + —Ä–∞–Ω–≥ –ø–æ rank_tier –∏–∑ OpenDota (Dota 2, 2025)."""
    if rank_tier == 0:
        return "‚ùì Unranked"
    
    # Mapping –ø–æ —Ç—å–µ—Ä–∞–º (Herald 10-14, Guardian 20-24, etc.)
    if 10 <= rank_tier <= 14:  # Herald
        sub = rank_tier - 9  # 10=1, 11=2, ...
        return f"üêõ Herald {sub}"
    elif 20 <= rank_tier <= 24:  # Guardian
        sub = rank_tier - 19
        return f"üõ°Ô∏è Guardian {sub}"
    elif 30 <= rank_tier <= 34:  # Crusader (—Ç–≤–æ–π ~32)
        sub = rank_tier - 29
        return f"‚öîÔ∏è Crusader {sub}"
    elif 40 <= rank_tier <= 44:  # Archon
        sub = rank_tier - 39
        return f"üèõÔ∏è Archon {sub}"
    elif 50 <= rank_tier <= 54:  # Legend
        sub = rank_tier - 49
        return f"üëë Legend {sub}"
    elif 60 <= rank_tier <= 64:  # Ancient
        sub = rank_tier - 59
        return f"üè∫ Ancient {sub}"
    elif 70 <= rank_tier <= 74:  # Divine
        sub = rank_tier - 69
        return f"‚ú® Divine {sub}"
    elif rank_tier >= 80:  # Immortal
        return "‚ò†Ô∏è Immortal"
    else:
        return "‚ùì Unknown Rank"

async def get_rank_tier_from_steamid(steam_id: str) -> Optional[int]:
    """–¢—è–Ω–µ—Ç rank_tier –∏–∑ OpenDota API."""
    try:
        # –ü–∞—Ä—Å–∏–º SteamID –≤ 64-bit (—Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –≤ get_mmr_from_steamid)
        if steam_id.startswith("STEAM_0:"):
            parts = re.match(r'STEAM_0:(\d):(\d+)', steam_id)
            if parts:
                universe = 1  # Default
                auth = int(parts.group(1))
                account = int(parts.group(2))
                steamid64 = 76561197960265728 + (account * 2) + auth
            else:
                return None
        else:
            # Assume 64-bit
            steamid64 = int(steam_id)
        
        account_id = steamid64 - 76561197960265728
        if account_id <= 0:
            return None
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.opendota.com/api/players/{account_id}") as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                return data.get("rank_tier")
    except Exception as e:
        logger.error(f"Error fetching rank_tier for {steam_id}: {e}")
        return None

async def get_mmr_from_steamid(steam_input: str, user_id: Optional[int] = None) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç MMR –∏–∑ OpenDota API –ø–æ SteamID –∏–ª–∏ account ID, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î –µ—Å–ª–∏ user_id –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."""
    try:
        steam_id = steam_input.strip()
        
        # –ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ account ID (digits, <2^32), STEAM_0 –∏–ª–∏ 64-bit
        if re.match(r'^\d{7,10}$', steam_id):  # –ü—Ä–æ—Å—Ç–æ account ID (e.g., 933834754)
            account_id = int(steam_id)
            steamid64 = 76561197960265728 + account_id  # –ö–æ–Ω–≤–µ—Ä—Ç –≤ 64-bit (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º STEAM_0:0)
            logger.info(f"Converted account_id {account_id} to Steam64: {steamid64}")
        elif steam_id.startswith("STEAM_0:"):
            parts = re.match(r'STEAM_0:(\d):(\d+)', steam_id)
            if parts:
                auth = int(parts.group(1))
                account = int(parts.group(2))
                steamid64 = 76561197960265728 + (account * 2) + auth
            else:
                logger.warning(f"Invalid STEAM_0 format: {steam_id}")
                return None
        else:
            # Assume 64-bit
            try:
                steamid64 = int(steam_id)
            except ValueError:
                logger.warning(f"Invalid SteamID: {steam_id}")
                return None
        
        account_id = steamid64 - 76561197960265728
        if account_id <= 0:
            logger.warning(f"Invalid account_id: {account_id} from {steam_id}")
            return None
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.opendota.com/api/players/{account_id}") as resp:
                if resp.status != 200:
                    logger.warning(f"API error {resp.status} for account {account_id}")
                    return None
                data = await resp.json()
                
                mmr = data.get("solo_mmr")
                rank_tier = data.get("rank_tier")
                logger.info(f"API data for {steam_id}: solo_mmr={mmr}, rank_tier={rank_tier}")

                if mmr is not None:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º solo_mmr –∏ tier
                    if user_id:
                        update_data = {"mmr": int(mmr), "steam_id": steam_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π input
                        if rank_tier is not None:
                            update_data["rank_tier"] = rank_tier
                        response = supabase.table("users").update(update_data).eq("user_id", str(user_id)).execute()
                        if response.data:  # Check response
                            logger.info(f"Updated DB for {user_id}: mmr={mmr}, rank_tier={rank_tier}")
                        else:
                            logger.warning(f"DB update failed for {user_id}")
                    return int(mmr)
                elif rank_tier is not None:
                    approx_mmr = _get_approx_mmr_from_rank_tier(rank_tier)
                    if approx_mmr:
                        if user_id:
                            update_data = {"mmr": approx_mmr, "steam_id": steam_id}
                            update_data["rank_tier"] = rank_tier
                            response = supabase.table("users").update(update_data).eq("user_id", str(user_id)).execute()
                            if response.data:
                                logger.info(f"Updated DB for {user_id}: approx_mmr={approx_mmr}, rank_tier={rank_tier}")
                            else:
                                logger.warning(f"DB update failed for {user_id}")
                        return approx_mmr
                else:
                    logger.warning(f"No MMR data for {steam_id}")
                    if user_id:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ steam_id, –¥–∞–∂–µ –±–µ–∑ MMR
                        response = supabase.table("users").update({"steam_id": steam_id}).eq("user_id", str(user_id)).execute()
                return None
    except Exception as e:
        logger.error(f"Error fetching MMR for {steam_input}: {e}")
        return None
    
def _get_approx_mmr_from_rank_tier(rank_tier: int) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π MMR –¥–ª—è rank_tier (–ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º Dota 2, 2025)."""
    if rank_tier == 0:
        return 0  # Unranked
    
    # Mapping rank_tier -> tier/sub (OpenDota: Crusader 30-34, etc.)
    if 10 <= rank_tier <= 14:  # Herald
        base, step = 0, 192
        sub = rank_tier - 10
    elif 20 <= rank_tier <= 24:  # Guardian
        base, step = 770, 153
        sub = rank_tier - 20
    elif 30 <= rank_tier <= 34:  # Crusader
        base, step = 1540, 153
        sub = rank_tier - 30  # 0=1, 1=2 (31), 2=3 (32)
    elif 40 <= rank_tier <= 44:  # Archon
        base, step = 2310, 153
        sub = rank_tier - 40
    elif 50 <= rank_tier <= 54:  # Legend
        base, step = 3080, 153
        sub = rank_tier - 50
    elif 60 <= rank_tier <= 64:  # Ancient
        base, step = 3850, 153
        sub = rank_tier - 60
    elif 70 <= rank_tier <= 74:  # Divine
        base, step = 4620, 400
        sub = rank_tier - 70
    elif rank_tier >= 80:  # Immortal
        return 6000  # Approx mid Immortal
    else:
        return None
    
    # Mid-range: base + (sub + 0.5) * step
    mid_mmr = base + (sub + 0.5) * step
    return int(round(mid_mmr))

async def get_free_dota_account() -> Optional[int]:
    """Get ID of a free Dota account."""
    try:
        response = supabase.table("dota_accounts").select("id").eq("busy", False).limit(1).execute()
        return int(response.data[0]["id"]) if response.data else None
    except Exception as e:
        logger.error(f"Error getting free account: {e}")
        return None

async def remove_team_role_from_all(guild: discord.Guild, team_name: str):
    """–°–Ω—è—Ç—å —Ä–æ–ª—å —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–¥–∞–ª–∏—Ç—å –µ—ë"""
    role = discord.utils.get(guild.roles, name=team_name)
    if role:
        for member in role.members:
            try:
                await member.remove_roles(role)
            except discord.Forbidden:
                print(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É —É–±—Ä–∞—Ç—å —Ä–æ–ª—å {team_name} —É {member}")
        try:
            await role.delete(reason="–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        except discord.Forbidden:
            print(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ {team_name}")
async def remove_team_role(guild, member, team_name):
    role = discord.utils.get(guild.roles, name=team_name)
    if role is None:
        print(f"Role {team_name} not found in guild {guild.name}")
        return
    try:
        await member.remove_roles(role)
        print(f"Removed role {team_name} from {member.id}")
    except discord.Forbidden:
        print(f"Bot lacks permissions to remove role {team_name} from {member.id}")
    except Exception as e:
        print(f"Error removing role: {e}")

async def ensure_team_role(guild: discord.Guild, team_name: str) -> discord.Role:
    """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    role = discord.utils.get(guild.roles, name=team_name)
    if not role:
        rand_color = discord.Color(random.randint(0x000000, 0xFFFFFF))
        try:
            role = await guild.create_role(name=team_name, colour=rand_color, hoist=True)
        except discord.Forbidden:
            print(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ {team_name}")
            return None
    return role


async def assign_team_role(guild, member, team_name):
    role = discord.utils.get(guild.roles, name=team_name)
    if role:
        try:
            await member.add_roles(role)
            print(f"Assigned role {team_name} to {member.id}")
        except discord.Forbidden:
            print("Bot lacks permissions to assign roles")
        except Exception as e:
            print(f"Error assigning role: {e}")
    else:
        print(f"Role {team_name} not found")

async def ensure_user(user_id: int, name: str = None):
    """Ensure a user exists in the database with a default balance and last duel time of 0."""
    try:
        response = await asyncio.to_thread(
            supabase.table("users").select("*").eq("user_id", str(user_id)).execute
        )
        if not response.data:
            await asyncio.to_thread(
                supabase.table("users").insert({
                    "user_id": str(user_id),
                    "name": name,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º
                    "balance": 0,
                    "last_duel_time": 0
                }).execute
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if name and response.data[0].get("name") != name:
                await asyncio.to_thread(
                    supabase.table("users").update({"name": name}).eq("user_id", str(user_id)).execute
                )
    except Exception as e:
        logger.error(f"Error ensuring user {user_id}: {e}")
        raise

async def get_balance(user_id: int) -> int:
    """Get the balance of a user."""
    await ensure_user(user_id)
    try:
        response = await asyncio.to_thread(
            supabase.table("users").select("balance").eq("user_id", str(user_id)).execute
        )
        return int(response.data[0]["balance"]) if response.data else 0
    except Exception as e:
        logger.error(f"Error getting balance for user {user_id}: {e}")
        raise

async def add_balance(user_id: int, delta: int):
    async with balance_lock:
        await ensure_user(user_id)
        try:
            current_balance = await get_balance(user_id)
            new_balance = current_balance + int(delta)
            await asyncio.to_thread(
                supabase.table("users").update({"balance": new_balance}).eq("user_id", str(user_id)).execute
            )
            logger.info(f"Balance updated for user {user_id}: {current_balance} -> {new_balance}")
        except Exception as e:
            logger.error(f"Error updating balance for user {user_id}: {e}")
            raise

async def add_moderator(user_id: int, guild_id: str) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è guild."""
    try:
        response = await asyncio.to_thread(
            supabase.table("moderators").insert({
                "user_id": str(user_id),
                "guild_id": guild_id
            }).execute
        )
        return bool(response.data)
    except Exception as e:
        logger.error(f"Error adding moderator {user_id}: {e}")
        return False

async def remove_moderator(user_id: int, guild_id: str) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    try:
        response = await asyncio.to_thread(
            supabase.table("moderators").delete().eq("user_id", str(user_id)).eq("guild_id", guild_id).execute
        )
        return bool(response.data)
    except Exception as e:
        logger.error(f"Error removing moderator {user_id}: {e}")
        return False

async def get_moderators(guild_id: str) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è guild."""
    try:
        response = await asyncio.to_thread(
            supabase.table("moderators").select("user_id").eq("guild_id", guild_id).execute
        )
        return [int(row["user_id"]) for row in response.data] if response.data else []
    except Exception as e:
        logger.error(f"Error getting moderators for guild {guild_id}: {e}")
        return []

async def is_moderator(user_id: int, guild_id: str) -> bool:
    try:
        response = await asyncio.to_thread(
            supabase.table("moderators").select("user_id").eq("guild_id", guild_id).eq("user_id", str(user_id)).execute
        )
        is_mod = bool(response.data)
        logger.info(f"is_moderator: user={user_id}, guild={guild_id}, found={is_mod}, data_len={len(response.data) if response.data else 0}")  # ‚úÖ –†–∞—Å—à–∏—Ä—å –ª–æ–≥
        return is_mod
    except Exception as e:
        logger.error(f"Error in is_moderator {user_id}/{guild_id}: {e}")
        return False

async def check_duel_limit(user_id: int) -> bool:
    """Check if a user can participate in a duel (24-hour cooldown)."""
    try:
        response = supabase.table("users").select("last_duel_time").eq("user_id", str(user_id)).execute()
        last_duel = int(response.data[0]["last_duel_time"]) if response.data and response.data[0]["last_duel_time"] is not None else 0
        now = int(time.time())
        return now - last_duel >= 1  # 24 hours
    except Exception as e:
        logger.error(f"Error checking duel limit for user {user_id}: {e}")
        raise

async def update_duel_time(user_id: int):
    """Update the last duel time for a user."""
    try:
        supabase.table("users").update({"last_duel_time": int(time.time())}).eq("user_id", str(user_id)).execute()
    except Exception as e:
        logger.error(f"Error updating duel time for user {user_id}: {e}")
        raise

async def create_duel(channel_id: int, player1_id: Optional[int] = None, player2_id: Optional[int] = None, team1_id: Optional[int] = None, team2_id: Optional[int] = None, points: int = 0, duel_type: str = "1v1", is_public: bool = False, creator_user_id: Optional[int] = None) -> int:
    """Create a new duel and invite the opponent."""
    now = int(time.time())
    try:
        insert_data = {
            "channel_id": int(channel_id),
            "points": int(points),
            "status": "public" if is_public else "waiting",
            "type": duel_type,
            "is_public": is_public,
            "created_at": now,
            "announced": False,
            "steam_team_a": None,
            "steam_team_b": None,
            "dota_account_id": None,
            "dota_match_id": None,
            "stats": None,
            "reason": None,
            "completed_at": None,
            "creator_id": str(creator_user_id) if creator_user_id else None,  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥—É—ç–ª–∏
        }
        logger.info(f"Creating duel with data: {insert_data}")
        if duel_type == "1v1":
            if player1_id is None:
                raise ValueError("player1_id required for 1v1")
            insert_data["player1_id"] = str(player1_id)
            insert_data["player2_id"] = str(player2_id) if player2_id else None
        else:  # 5v5
            insert_data["team1_id"] = str(team1_id) if team1_id else None
            insert_data["team2_id"] = str(team2_id) if team2_id else None

        duel_response = await asyncio.to_thread(supabase.table("duels").insert(insert_data).execute)
        logger.info(f"Created duel ID: {duel_response.data[0]['id']}, is_public: {duel_response.data[0].get('is_public', 'NOT SET')}, status: {duel_response.data[0].get('status')}")
        duel_id = int(duel_response.data[0]["id"])
        
        if not is_public and player2_id:  # Only for private 1v1
            supabase.table("duel_invites").insert({
                "duel_id": duel_id,
                "user_id": str(player2_id),
                "status": "pending",
                "created_at": now
            }).execute()
        elif not is_public and team2_id:  # For private 5v5
            leader2 = await get_team_leader(team2_id)
            if leader2:
                supabase.table("duel_invites").insert({
                    "duel_id": duel_id,
                    "user_id": str(leader2),
                    "status": "pending",
                    "created_at": now
                }).execute()
        return duel_id
    except Exception as e:
        logger.error(f"Error creating duel: {e}")
        raise

async def set_duel_message(duel_id: int, message_id: int):
    """Set the message ID for a duel."""
    try:
        supabase.table("duels").update({"message_id": int(message_id)}).eq("id", int(duel_id)).execute()
    except Exception as e:
        logger.error(f"Error setting duel message ID {duel_id}: {e}")
        raise

async def update_duel_status(duel_id: int, new_status: str):
    try:
        supabase.table("duels").update({"status": new_status}).eq("id", int(duel_id)).execute()
        duel = await get_duel(duel_id)
        if duel and duel.get("message_id"):
            channel = bot.get_channel(int(duel["channel_id"]))
            if channel:
                try:
                    msg = await channel.fetch_message(int(duel["message_id"]))
                    await refresh_duel_message(msg, duel)
                except Exception as e:
                    logger.error(f"Error refreshing duel message {duel_id}: {e}")
    except Exception as e:
        logger.error(f"Error updating duel status {duel_id}: {e}")

async def get_duel(duel_id: int) -> Optional[dict]:
    """Get details of a duel by ID."""
    try:
        response = supabase.table("duels").select("*").eq("id", int(duel_id)).execute()
        return response.data[0] if response.data else None
    except Exception as e:
        logger.error(f"Error getting duel {duel_id}: {e}")
        raise

async def has_pending_duel(user_id: int) -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç–∞—è pending –¥—É—ç–ª—å (waiting/public)."""
    try:
        # Check 1v1: creator as player1
        response = await asyncio.to_thread(
            supabase.table("duels")
            .select("id")
            .eq("player1_id", str(user_id))
            .in_("status", ["waiting", "public"])
            .execute
        )
        if response.data:
            return int(response.data[0]["id"])
        
        # Check 5v5: creator as team1 leader
        user_team = await get_user_team(user_id)
        if user_team and str(user_id) == user_team["leader_id"]:
            response = await asyncio.to_thread(
                supabase.table("duels")
                .select("id")
                .eq("team1_id", str(user_team["id"]))
                .in_("status", ["waiting", "public"])
                .execute
            )
            if response.data:
                return int(response.data[0]["id"])
        
        return None
    except Exception as e:
        logger.error(f"Error checking pending duel for {user_id}: {e}")
        return None

async def update_duel_invite_status(duel_id: int, user_id: int, status: str):
    """Update the status of a duel invite."""
    try:
        await asyncio.to_thread(
            supabase.table("duel_invites").update({"status": status}).eq("duel_id", int(duel_id)).eq("user_id", str(user_id)).execute
        )
        duel = await get_duel(duel_id)
        if status == "accepted":
            await asyncio.to_thread(
                supabase.table("duels").update({"status": "active"}).eq("id", int(duel_id)).execute
            )
            # Deduct points from second player/leader
            if duel["type"] == "1v1":
                await add_balance(int(duel["player2_id"]), -int(duel["points"]))
                # ‚úÖ Cooldown —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ accepted
                await update_duel_time(int(duel["player1_id"]))
                await update_duel_time(int(duel["player2_id"]))
            else:  # 5v5
                leader2 = await get_team_leader(int(duel["team2_id"]))
                if leader2:
                    await add_balance(leader2, -int(duel["points"]))
                    # ‚úÖ Cooldown –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ accepted
                    leader1 = await get_team_leader(int(duel["team1_id"]))
                    if leader1:
                        await update_duel_time(leader1)
                    await update_duel_time(leader2)
            # Refresh message
            if duel.get("message_id"):
                channel = bot.get_channel(int(duel["channel_id"]))
                if channel:
                    try:
                        msg = await channel.fetch_message(int(duel["message_id"]))
                        await refresh_duel_message(msg, duel)
                    except Exception as e:
                        logger.error(f"Error refreshing after accept {duel_id}: {e}")
        elif status == "declined":
            await asyncio.to_thread(
                supabase.table("duels").update({"status": "cancelled"}).eq("id", int(duel_id)).execute
            )
            # Refund first player/leader (–±–µ–∑ cooldown)
            if duel["type"] == "1v1":
                await add_balance(int(duel["player1_id"]), int(duel["points"]))
            else:
                leader1 = await get_team_leader(int(duel["team1_id"]))
                if leader1:
                    await add_balance(leader1, int(duel["points"]))
            # Refresh message
            if duel.get("message_id"):
                channel = bot.get_channel(int(duel["channel_id"]))
                if channel:
                    try:
                        msg = await channel.fetch_message(int(duel["message_id"]))
                        await refresh_duel_message(msg, duel)
                    except Exception as e:
                        logger.error(f"Error refreshing after decline {duel_id}: {e}")
    except Exception as e:
        logger.error(f"Error updating duel invite status for duel {duel_id}, user {user_id}: {e}")

async def join_public_duel(duel_id: int, joining_user_id: int, joining_team_id: Optional[int] = None, points: int = 0):
    """Handle joining a public duel (1v1 or 5v5)."""
    try:
        duel = await get_duel(duel_id)
        if not duel or duel["status"] != "public" or duel["is_public"] is False:
            return False, "–î—É—ç–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
        
        if duel["type"] == "1v1":
            if duel["player2_id"] is not None:
                return False, "–î—É—ç–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞."
            bal = await get_balance(joining_user_id)
            if bal < points:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤: {bal}."
            # ‚úÖ Cooldown –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ join, –Ω–æ update —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ
            if not await check_duel_limit(joining_user_id):
                return False, "–í—ã —É–∂–µ –¥—É—ç–ª–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è."
            if str(joining_user_id) == duel["player1_id"]:
                return False, "–í—ã —É–∂–µ –≤ –¥—É—ç–ª–∏."
            await asyncio.to_thread(
                supabase.table("duels").update({"player2_id": str(joining_user_id), "status": "active"}).eq("id", duel_id).execute
            )
            await add_balance(joining_user_id, -points)
            # ‚úÖ Cooldown —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ join
            await update_duel_time(joining_user_id)
            await update_duel_time(int(duel["player1_id"]))
            # Refresh message
            if duel.get("message_id"):
                channel = bot.get_channel(int(duel["channel_id"]))
                if channel:
                    try:
                        msg = await channel.fetch_message(int(duel["message_id"]))
                        await refresh_duel_message(msg, duel)
                    except Exception as e:
                        logger.error(f"Error refreshing after public join 1v1 {duel_id}: {e}")
            return True, "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –¥—É—ç–ª–∏. –û–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
        else:  # 5v5
            team = await get_team(joining_team_id)
            if not team or not await is_team_full_and_confirmed(team):
                return False, "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π."
            if str(joining_user_id) != team["leader_id"]:
                return False, "–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
            bal = await get_balance(joining_user_id)
            if bal < points:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤ —É –ª–∏–¥–µ—Ä–∞: {bal}."
            # ‚úÖ Cooldown –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ join
            if not await check_duel_limit(joining_user_id):
                return False, "–õ–∏–¥–µ—Ä —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –¥—É—ç–ª–∏ —Å–µ–≥–æ–¥–Ω—è."
            if duel["team1_id"] and str(joining_team_id) == duel["team1_id"]:
                return False, "–ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –¥—É—ç–ª–∏."
            if duel["team1_id"] is None:
                await asyncio.to_thread(
                    supabase.table("duels").update({"team1_id": str(joining_team_id), "status": "active"}).eq("id", duel_id).execute
                )
                await add_balance(joining_user_id, -points)
                # ‚úÖ Cooldown –¥–ª—è –æ–±–æ–∏—Ö –ª–∏–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ join
                await update_duel_time(joining_user_id)
                creator_leader = await get_team_leader(int(duel["team1_id"]))
                if creator_leader:
                    await update_duel_time(creator_leader)
                # Refresh message
                if duel.get("message_id"):
                    channel = bot.get_channel(int(duel["channel_id"]))
                    if channel:
                        try:
                            msg = await channel.fetch_message(int(duel["message_id"]))
                            await refresh_duel_message(msg, duel)
                        except Exception as e:
                            logger.error(f"Error refreshing after public join 5v5 {duel_id}: {e}")
                return True, "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –¥—É—ç–ª–∏. –û–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
            else:
                return False, "–î—É—ç–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞."
    except Exception as e:
        logger.error(f"Error joining public duel {duel_id}: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."

async def auto_refund_public_duel(duel_id: int, creator_id: int, points: int):
    """Auto-refund public duel after 1 hour if no join."""
    await asyncio.sleep(3600)  # 1 hour
    try:
        duel = await get_duel(duel_id)
        if not duel or duel["status"] != "public":
            logger.info(f"Auto-refund skipped for {duel_id}: status {duel['status'] if duel else 'None'}")
            return
        # Refund creator
        await add_balance(creator_id, points)
        # Update status
        await update_duel_status(duel_id, "cancelled")
        # Notify in channel
        channel = bot.get_channel(int(duel["channel_id"]))
        if channel:
            embed = await build_duel_embed(duel)
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="‚è∞ –û—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è)", inline=False)
            view = discord.ui.View()  # No buttons
            if duel.get("message_id"):
                try:
                    msg = await channel.fetch_message(int(duel["message_id"]))
                    await msg.edit(embed=embed, view=view)
                except:
                    await channel.send(embed=embed)
            else:
                await channel.send(embed=embed)
        logger.info(f"Auto-refund for duel {duel_id}: {points} returned to {creator_id}")
    except Exception as e:
        logger.error(f"Error in auto-refund {duel_id}: {e}")

async def settle_duel(duel_id: int, winner_side: str) -> Tuple[bool, str]:
    logger.info(f"Starting settle_duel for {duel_id}, winner {winner_side}")
    if winner_side not in ("A", "B"):
        return False, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'A' –∏–ª–∏ 'B'."
    
    try:
        duel = await get_duel(duel_id)
        if not duel:
            return False, "–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if duel["status"] not in ("processing", "result_pending"):  # Allow manual on processing too
            return False, "–î—É—ç–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        
        logger.info(f"Duel {duel_id} current status: {duel['status']}")
        points = int(duel["points"])
        total_pot = points * 2  # –û–±—â–∏–π –±–∞–Ω–∫
        burn_rate = DEFAULT_BURN  # 0.25
        burned_amount = int(total_pot * burn_rate)  # 25% —Å–≥–æ—Ä–∞–µ—Ç
        payout = total_pot - burned_amount  # –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        
        winner_leader = None
        if winner_side == "A":
            if duel["type"] == "1v1":
                winner_leader = int(duel["player1_id"])
            else:
                winner_leader = await get_team_leader(int(duel["team1_id"]))
        else:  # winner_side == "B"
            if duel["type"] == "1v1":
                winner_leader = int(duel["player2_id"])
            else:
                winner_leader = await get_team_leader(int(duel["team2_id"]))
        
        if not winner_leader:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏–¥–µ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ—á–µ–∫ –≤ –ª–æ–≥
        logger.info(f"Winner leader {winner_leader}, total_pot {total_pot}, burned {burned_amount}, payout {payout}, updating to settled")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ winner_side
        supabase.table("duels").update({"status": "settled", "winner_side": winner_side}).eq("id", int(duel_id)).execute()
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
        response = supabase.table("duels").select("status", "winner_side").eq("id", int(duel_id)).execute()
        if not response.data:
            logger.error(f"No data after update for duel {duel_id}")
            return False, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å."
        updated_db = response.data[0]
        logger.info(f"DB check after update: status {updated_db['status']}, winner_side {updated_db.get('winner_side', 'None')}")
        if updated_db["status"] != "settled" or updated_db.get("winner_side") != winner_side:
            logger.error(f"DB update failed: expected settled/{winner_side}, got {updated_db['status']}/{updated_db.get('winner_side')}")
            return False, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î."
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ payout –ª–∏–¥–µ—Ä—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ —É –Ω–µ–≥–æ —É–∂–µ -points)
        await add_balance(winner_leader, payout)
        logger.info(f"Balance updated for {winner_leader}: +{payout} (netto +{payout - points})")
        
        await update_duel_status(duel_id, "settled")
        return True, f"–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_side} ({payout} –ø–æ–∏–Ω—Ç–æ–≤ –ª–∏–¥–µ—Ä—É, —Å–≥–æ—Ä–µ–ª–æ {burned_amount})."
    except Exception as e:
        logger.error(f"Error settling duel {duel_id}: {e}")
        raise


async def create_team(leader_id: int, players: List[int], name: str) -> int:
    """Create a new team with the specified players."""
    now = int(time.time())
    try:
        team_response = supabase.table("teams").insert({
            "leader_id": str(leader_id),
            "player1_id": str(players[0]),
            "player2_id": str(players[1]),
            "player3_id": str(players[2]),
            "player4_id": str(players[3]),
            "player5_id": str(players[4]),
            "name": name,               # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            "status": "pending",
            "created_at": now
        }).execute()
        team_id = int(team_response.data[0]["id"])
        
        for player_id in players:
            supabase.table("team_invites").insert({
                "team_id": team_id,
                "user_id": str(player_id),
                "status": "pending",
                "created_at": now
            }).execute()
        return team_id
    except Exception as e:
        logger.error(f"Error creating team: {e}")
        raise


async def get_team(team_id: int) -> Optional[dict]:
    """Get details of a team by ID."""
    try:
        response = supabase.table("teams").select("*").eq("id", int(team_id)).execute()
        return response.data[0] if response.data else None
    except Exception as e:
        logger.error(f"Error getting team {team_id}: {e}")
        raise

async def get_user_team(user_id: int) -> Optional[dict]:
    """Get the team a user is part of."""
    try:
        response = supabase.table("teams").select("*").or_(f"leader_id.eq.{str(user_id)},player1_id.eq.{str(user_id)},player2_id.eq.{str(user_id)},player3_id.eq.{str(user_id)},player4_id.eq.{str(user_id)},player5_id.eq.{str(user_id)}").execute()
        return response.data[0] if response.data else None
    except Exception as e:
        logger.error(f"Error getting team for user {user_id}: {e}")
        raise
async def get_team_leader(team_id: int) -> Optional[int]:
    """Get the leader ID of a team."""
    team = await get_team(team_id)
    return int(team["leader_id"]) if team else None

async def is_user_in_team(team: dict, user_id: int) -> bool:
    """Check if a user is in a team (leader or player)."""
    if str(user_id) == team["leader_id"]:
        return True
    for i in range(1, 6):
        if team.get(f"player{i}_id") == str(user_id):
            return True
    return False

async def is_team_full_and_confirmed(team: dict) -> bool:
    """Check if a team is full (5 players) and confirmed."""
    if team["status"] != "confirmed":
        return False
    player_count = sum(1 for i in range(1, 6) if team.get(f"player{i}_id"))
    return player_count >= 5


async def remove_from_team(user_id: int):
    """Remove a user from their team."""
    try:
        team = await get_user_team(user_id)
        if team:
            team_id = team["id"]
            updates = {}
            for i in range(1, 6):
                if team[f"player{i}_id"] == str(user_id):
                    updates[f"player{i}_id"] = None
            if updates:
                supabase.table("teams").update(updates).eq("id", team_id).execute()
                supabase.table("team_invites").update({"status": "left"}).eq("team_id", team_id).eq("user_id", str(user_id)).execute()
                supabase.table("teams").update({"status": "pending"}).eq("id", team_id).execute()
    except Exception as e:
        logger.error(f"Error removing user {user_id} from team: {e}")
        raise

async def create_match(channel_id: int, team_a: str, team_b: str, burn: float) -> int:
    """Create a new match for betting."""
    now = int(time.time())
    try:
        response = supabase.table("matches").insert({
            "channel_id": int(channel_id),
            "team_a": team_a.strip(),
            "team_b": team_b.strip(),
            "burn": float(burn),
            "status": "–û—Ç–∫—Ä—ã—Ç–∞",
            "total_a": 0,
            "total_b": 0,
            "created_at": now
        }).execute()
        return int(response.data[0]["id"])
    except Exception as e:
        logger.error(f"Error creating match: {e}")
        raise

async def set_match_message(match_id: int, message_id: int):
    """Set the message ID for a match."""
    try:
        supabase.table("matches").update({"message_id": int(message_id)}).eq("id", int(match_id)).execute()
    except Exception as e:
        logger.error(f"Error setting match message ID {match_id}: {e}")
        raise

async def get_match(match_id: int) -> Optional[dict]:
    """Get details of a match by ID."""
    try:
        response = await asyncio.to_thread(
            supabase.table("matches").select("*").eq("id", int(match_id)).execute
        )
        return response.data[0] if response.data else None
    except Exception as e:
        logger.error(f"Error getting match {match_id}: {e}")
        raise

async def sum_bets(match_id: int, team: str) -> int:
    """Sum the total bets for a team in a match."""
    try:
        response = supabase.table("bets").select("amount").eq("match_id", int(match_id)).eq("team", team).execute()
        return sum(int(bet["amount"]) for bet in response.data) if response.data else 0
    except Exception as e:
        logger.error(f"Error summing bets for match {match_id}, team {team}: {e}")
        raise

async def place_bet(match_id: int, user_id: int, team: str, amount: int) -> Tuple[bool, str]:
    """Place a bet on a match for a specific team."""
    assert team in ("A", "B")
    try:
        amount = safe_int(amount)
    except ValueError as e:
        return False, str(e)
    if amount <= 0:
        return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0."

    try:
        match = await get_match(match_id)
        if not match:
            return False, "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω."
        if match["status"] != "–û—Ç–∫—Ä—ã—Ç–∞":
            return False, "–°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã."

        await ensure_user(user_id)
        current_balance = await get_balance(user_id)
        if amount > current_balance:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {current_balance}."

        async with balance_lock:  # Ensure atomic transaction
            # Deduct balance directly
            new_balance = current_balance - amount
            await asyncio.to_thread(
                supabase.table("users").update({"balance": new_balance}).eq("user_id", str(user_id)).execute
            )

            # Insert bet
            await asyncio.to_thread(
                supabase.table("bets").insert({
                    "match_id": int(match_id),
                    "user_id": str(user_id),
                    "team": team,
                    "amount": amount,
                    "created_at": int(time.time())
                }).execute
            )

            # Update match total
            if team == "A":
                new_total = int(match["total_a"]) + amount
                await asyncio.to_thread(
                    supabase.table("matches").update({"total_a": new_total}).eq("id", int(match_id)).execute
                )
            else:
                new_total = int(match["total_b"]) + amount
                await asyncio.to_thread(
                    supabase.table("matches").update({"total_b": new_total}).eq("id", int(match_id)).execute
                )

        return True, "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
    except Exception as e:
        logger.error(f"Error placing bet for match {match_id}, user {user_id}: {e}")
        # Potential refund if deducted but failed
        try:
            await add_balance(user_id, amount)
        except:
            pass
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: {str(e)}"


async def close_bet(match_id: int) -> Tuple[bool, str]:
    """Close betting for a match."""
    try:
        match = (supabase.table("matches").select("status").eq("id", int(match_id)).execute()).data
        if not match:
            return False, "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω."
        if match[0]["status"] != "–û—Ç–∫—Ä—ã—Ç–∞":
            return False, "–ú–∞—Ç—á —É–∂–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç."
        supabase.table("matches").update({"status": "–ó–∞–∫—Ä—ã—Ç–∞"}).eq("id", int(match_id)).execute()
        return True, "–ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç."
    except Exception as e:
        logger.error(f"Error closing bet for match {match_id}: {e}")
        raise

async def cancel_bet(match_id: int) -> Tuple[bool, str, int]:
    """Cancel a match and refund all bets."""
    refunded = 0
    try:
        # –ø–æ–ª—É—á–∞–µ–º –º–∞—Ç—á —á–µ—Ä–µ–∑ helper (await –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç.–∫. get_match ‚Äî async)
        m = await get_match(match_id)
        if not m:
            return False, "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", refunded

        status = (m.get("status") or "").lower()
        if status in ("cancelled", "settled", "cancelling"):
            return False, "–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–º–µ–Ω—ã.", refunded

        # –ø–æ–º–µ—á–∞–µ–º –º–∞—Ç—á –∫–∞–∫ 'cancelling' —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        supabase.table("matches").update({"status": "cancelling"}).eq("id", int(match_id)).execute()

        # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ execute ‚Äî –ù–ï await)
        bets_res = supabase.table("bets").select("user_id,amount").eq("match_id", int(match_id)).execute()
        bets = bets_res.data or []

        # –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã
        for bet in bets:
            try:
                uid = int(bet["user_id"])
                amt = int(bet["amount"])
            except Exception:
                logger.warning(f"[cancel_bet] –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è match={match_id}: {bet}")
                continue

            if amt <= 0:
                continue

            await add_balance(uid, amt)
            refunded += amt
            logger.info(f"[cancel_bet] refunded {amt} to user {uid} for match {match_id}")

        # –ø–æ–º–µ—á–∞–µ–º –º–∞—Ç—á –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π
        supabase.table("matches").update({"status": "cancelled"}).eq("id", int(match_id)).execute()
        logger.info(f"[cancel_bet] match={match_id} cancelled, total_refunded={refunded}")

        return True, f"–ú–∞—Ç—á –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refunded} –ø–æ–∏–Ω—Ç–æ–≤.", refunded

    except Exception as e:
        logger.exception(f"Error cancelling bet for match {match_id}: {e}")
        # –ø—Ä–æ–±—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å –º–∞—Ç—á –∫–∞–∫ cancelled (best-effort)
        try:
            supabase.table("matches").update({"status": "cancelled"}).eq("id", int(match_id)).execute()
        except Exception:
            pass
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –º–∞—Ç—á. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.", refunded


async def settle_bet(match_id: int, winner: str) -> Tuple[bool, str]:
    """Settle a match and distribute winnings."""
    winner = (winner or "").strip().upper()
    if winner not in ("A", "B"):
        return False, "winner –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'A' –∏–ª–∏ 'B'"

    try:
        # 1) —á–∏—Ç–∞–µ–º –º–∞—Ç—á (–±–µ–∑ await –¥–ª—è supabase-py)
        m_res = supabase.table("matches").select("*").eq("id", int(match_id)).execute()
        rows = m_res.data or []
        if not rows:
            return False, "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω."
        m = rows[0]

        status = (m.get("status") or "").lower()
        if status in ("cancelled", "settled"):
            return False, "–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω."

        burn = float(m["burn"]) if m.get("burn") is not None else DEFAULT_BURN
        total_a = int(m.get("total_a") or 0)
        total_b = int(m.get("total_b") or 0)

        # –ë–∞–Ω–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π / –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
        W = total_a if winner == "A" else total_b
        L = total_b if winner == "A" else total_a

        # –ù–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ‚Äî –≤—Å—ë —Å–≥–æ—Ä–∞–µ—Ç
        if W <= 0:
            supabase.table("matches").update({"status": "settled"}).eq("id", int(match_id)).execute()
            return True, "–ù–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –í–µ—Å—å –ø—Ä–æ–∏–≥—Ä—ã—à —Å–≥–æ—Ä–µ–ª."

        # 2) —Å—Ç–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        bets_res = supabase.table("bets").select("id,user_id,amount").eq("match_id", int(match_id)).eq("team", winner).execute()
        winners = bets_res.data or []
        if not winners:
            # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            supabase.table("matches").update({"status": "settled"}).eq("id", int(match_id)).execute()
            return True, "–°—Ç–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã; –ø–æ–º–µ—Ç–∏–ª –º–∞—Ç—á –∫–∞–∫ settled."

        distribute = int(round((1.0 - burn) * L))

        # 3) –¥–µ–ª–∏–º L*(1-burn) –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        shares = []
        acc_int = 0
        W = int(W)
        for wb in winners:
            amt = int(wb["amount"])
            raw = (amt / W) * distribute
            part_int = int(raw)                 # —Ü–µ–ª–∞—è —á–∞—Å—Ç—å
            frac = float(raw - part_int)        # –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
            shares.append((wb["id"], wb["user_id"], amt, part_int, frac))
            acc_int += part_int

        remainder = distribute - acc_int
        if remainder > 0:
            shares.sort(key=lambda x: x[4], reverse=True)
            for i in range(min(remainder, len(shares))):
                bid, uid, amt, pi, fr = shares[i]
                shares[i] = (bid, uid, amt, pi + 1, fr)

        # 4) –≤—ã–ø–ª–∞—Ç—ã: —Å—Ç–∞–≤–∫–∞ + –¥–æ–ª—è –∏–∑ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–∞–Ω–∫–∞
        paid_total = 0
        for _, uid, amt, part_int, _ in shares:
            payout = int(amt) + int(part_int)
            paid_total += payout
            await add_balance(int(uid), payout)

        supabase.table("matches").update({"status": "settled"}).eq("id", int(match_id)).execute()
        burned = L - distribute
        logger.info(f"[settle_bet] match={match_id} winner={winner} distribute={distribute} burned={burned} paid_total={paid_total}")
        return True, f"–í—ã–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–∞–∑–¥–∞–ª–∏ {distribute} –∏–∑ –±–∞–Ω–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö."
    except Exception as e:
        logger.exception(f"Error settling bet for match {match_id}: {e}")
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏."

def create_disabled_view(original_view_type: str) -> discord.ui.View:
    """–°–æ–∑–¥–∞–µ—Ç view —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."""
    view = discord.ui.View()
    
    if original_view_type == "duel_invite":
        view.add_item(discord.ui.Button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, disabled=True))
        view.add_item(discord.ui.Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, disabled=True))
    elif original_view_type == "team_invite":
        view.add_item(discord.ui.Button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, disabled=True))
        view.add_item(discord.ui.Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, disabled=True))
    
    return view

def get_dotabuff_account_id(steam_input: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç account_id (32-bit) –∏–∑ steam_id –¥–ª—è Dotabuff."""
    try:
        steam_id = steam_input.strip()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ –≤ get_mmr_from_steamid
        if re.match(r'^\d{7,10}$', steam_id):  # Account ID
            return int(steam_id)
        elif steam_id.startswith("STEAM_0:"):
            parts = re.match(r'STEAM_0:(\d):(\d+)', steam_id)
            if parts:
                auth = int(parts.group(1))
                account = int(parts.group(2))
                return (account * 2) + auth  # Account ID –∏–∑ STEAM_0
        else:  # 64-bit
            try:
                steamid64 = int(steam_id)
                account_id = steamid64 - 76561197960265728
                if account_id > 0:
                    return account_id
            except ValueError:
                pass
        return None
    except Exception as e:
        logger.error(f"Error extracting account_id from {steam_input}: {e}")
        return None
# ---------------------- UI ----------------------



class ManualMMRView(discord.ui.View):
    def __init__(self, user_id: int):
        super().__init__(timeout=300)  # 5 –º–∏–Ω
        self.user_id = user_id
        self.add_item(discord.ui.Button(label="–í–≤–µ—Å—Ç–∏ MMR", style=discord.ButtonStyle.primary, custom_id=f"manual_mmr:{user_id}"))

        

class LeaderboardView(discord.ui.View):
    def __init__(self, data, per_page=10):
        super().__init__(timeout=120)
        self.data = data
        self.per_page = per_page
        self.page = 0
        self.max_page = (len(data) - 1) // per_page

        self.prev_button = discord.ui.Button(label="‚óÄ", style=discord.ButtonStyle.secondary)
        self.next_button = discord.ui.Button(label="‚ñ∂", style=discord.ButtonStyle.secondary)
        self.prev_button.callback = self.prev_page
        self.next_button.callback = self.next_page

        self.add_item(self.prev_button)
        self.add_item(self.next_button)

    async def update_message(self, interaction):
        start = self.page * self.per_page
        end = start + self.per_page
        chunk = self.data[start:end]

        desc = "\n".join(
            [f"**{i+1}.** <@{row['user_id']}> ‚Äî {row['balance']}üí∞" for i, row in enumerate(chunk, start=start)]
        )

        embed = discord.Embed(
            title=f"üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Å—Ç—Ä. {self.page+1}/{self.max_page+1})",
            description=desc,
            color=discord.Color.gold()
        )
        await interaction.response.edit_message(embed=embed, view=self)

    async def prev_page(self, interaction):
        if self.page > 0:
            self.page -= 1
        await self.update_message(interaction)

    async def next_page(self, interaction):
        if self.page < self.max_page:
            self.page += 1
        await self.update_message(interaction)

class BetAmountModal(discord.ui.Modal, title="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏"):
    def __init__(self, match_id: int, team: str):
        super().__init__()
        self.match_id = match_id
        self.team = team
        self.amount = discord.ui.TextInput(
            label="–°—É–º–º–∞ –ø–æ–∏–Ω—Ç–æ–≤",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 100",
            required=True,
            min_length=1,
            max_length=12,
        )
        self.add_item(self.amount)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            amt = safe_int(self.amount.value.strip())
        except ValueError:
            await interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", ephemeral=True)
            return
        
        try:
            ok, msg = await place_bet(self.match_id, interaction.user.id, self.team, amt)
            if ok:
                await refresh_match_message(interaction, self.match_id)
            await interaction.response.send_message(msg, ephemeral=True)
        except Exception as e:
            logger.error(f"Error in bet modal: {e}")
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏.", ephemeral=True)

class TeamInviteView(discord.ui.View):
    def __init__(self, invite_id: int, user_id: int):
        super().__init__(timeout=None)  # Persistent view - no timeout
        self.invite_id = invite_id
        self.user_id = user_id

        self.accept_button = discord.ui.Button(
            label="–ü—Ä–∏–Ω—è—Ç—å", 
            style=discord.ButtonStyle.success, 
            custom_id=f"team_accept:{invite_id}:{user_id}"
        )
        self.add_item(self.accept_button)

        self.decline_button = discord.ui.Button(
            label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
            style=discord.ButtonStyle.danger, 
            custom_id=f"team_decline:{invite_id}:{user_id}"
        )
        self.add_item(self.decline_button)

    async def accept_team(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        invite_resp = supabase.table("team_invites").select("status, team_id").eq("id", self.invite_id).execute()
        if not invite_resp.data or invite_resp.data[0]["status"] != "pending":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
        team_id = int(invite_resp.data[0]["team_id"])
        team = supabase.table("teams").select("*").eq("id", team_id).execute().data[0]
        player_count = sum(1 for i in range(1, 6) if team.get(f"player{i}_id"))
        if player_count >= 5:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", ephemeral=True)
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º
        supabase.table("team_invites").update({"status": "accepted"}).eq("id", self.invite_id).execute()
        updates = {}
        for i in range(1, 6):
            if team.get(f"player{i}_id") is None:
                updates[f"player{i}_id"] = str(self.user_id)
                break
        if updates:
            supabase.table("teams").update(updates).eq("id", team_id).execute()
            # Check all invites
            invites = supabase.table("team_invites").select("status").eq("team_id", team_id).execute().data
            if all(invite["status"] == "accepted" for invite in invites):
                supabase.table("teams").update({"status": "confirmed"}).eq("id", team_id).execute()
        # Assign role
        guild = interaction.guild
        if guild:
            member = guild.get_member(self.user_id)
            if member:
                await assign_team_role(guild, member, team["name"])
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ª–∏–¥–µ—Ä–∞
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, f"<@{self.user_id}> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!")
        # –û—Ç–≤–µ—Ç –∏ disable
        await interaction.response.send_message("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        button.disabled = True
        self.decline_button.disabled = True
        await interaction.edit_original_response(view=self)

    async def decline_team(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
        supabase.table("team_invites").update({"status": "declined"}).eq("id", self.invite_id).execute()
        await interaction.response.send_message("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
        self.accept_button.disabled = True
        button.disabled = True
        await interaction.edit_original_response(view=self)
    
class TeamsView(discord.ui.View):
    def __init__(self, data, per_page=10):
        super().__init__(timeout=120)
        self.data = data
        self.per_page = per_page
        self.page = 0
        self.max_page = (len(data) - 1) // per_page

        self.prev_button = discord.ui.Button(label="‚óÄ", style=discord.ButtonStyle.secondary)
        self.next_button = discord.ui.Button(label="‚ñ∂", style=discord.ButtonStyle.secondary)
        self.prev_button.callback = self.prev_page
        self.next_button.callback = self.next_page

        self.add_item(self.prev_button)
        self.add_item(self.next_button)

    async def update_message(self, interaction):
        start = self.page * self.per_page
        end = start + self.per_page
        chunk = self.data[start:end]

        players_list = []
        for i, row in enumerate(chunk, start=start):
            players = [row.get(f'player{j}_id') for j in range(1, 6) if row.get(f'player{j}_id')]
            participants_str = " ".join([f"<@{p}>" for p in players if p != row['leader_id']]) if players else "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            status_emoji = "‚úÖ" if row['status'] == "confirmed" else "‚è≥"
            type_str = "üåç –ü—É–±–ª–∏—á–Ω–∞—è" if row['is_public'] else "üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è"
            players_list.append(
                f"**{start + i + 1}. {row['name']}** {status_emoji} {type_str}\n"
                f"üëë **–õ–∏–¥–µ—Ä:** <@{row['leader_id']}>\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants_str}"
            )

        desc = "\n\n".join(players_list) or "–ù–µ—Ç –∫–æ–º–∞–Ω–¥"

        embed = discord.Embed(
            title=f"üë• –ö–æ–º–∞–Ω–¥—ã (—Å—Ç—Ä. {self.page+1}/{self.max_page+1})",
            description=desc,
            color=discord.Color.blue()
        )
        await interaction.response.edit_message(embed=embed, view=self)

    async def prev_page(self, interaction):
        if self.page > 0:
            self.page -= 1
        await self.update_message(interaction)

    async def next_page(self, interaction):
        if self.page < self.max_page:
            self.page += 1
        await self.update_message(interaction)

class DuelInviteView(discord.ui.View):
    def __init__(self, duel_id: int, invitee_id: Optional[int] = None):
        super().__init__(timeout=None)  # Persistent
        self.duel_id = duel_id
        self.invitee_id = invitee_id or 0  # Dummy –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ invitee_id –∑–∞–¥–∞–Ω (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤)
        if invitee_id:
            self.add_item(discord.ui.Button(
                label="–ü—Ä–∏–Ω—è—Ç—å", 
                style=discord.ButtonStyle.success, 
                custom_id=f"duel_accept:{duel_id}:{invitee_id}"
            ))
            self.add_item(discord.ui.Button(
                label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                style=discord.ButtonStyle.danger, 
                custom_id=f"duel_decline:{duel_id}:{invitee_id}"
            ))
class PublicDuelView(discord.ui.View):
    def __init__(self, duel_id: int, creator_id: int):
        super().__init__(timeout=None)  # Persistent
        self.duel_id = duel_id
        self.creator_id = creator_id

        self.add_item(discord.ui.Button(
            label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", 
            style=discord.ButtonStyle.success, 
            custom_id=f"join_public_duel:{duel_id}"
        ))
        self.add_item(discord.ui.Button(
            label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", 
            style=discord.ButtonStyle.danger, 
            custom_id=f"cancel_public_duel:{duel_id}:{creator_id}"
        ))

class CancelDuelView(discord.ui.View):
    def __init__(self, duel_id: int, creator_id: int):
        super().__init__(timeout=None)  # Persistent
        self.duel_id = duel_id
        self.creator_id = creator_id

        self.add_item(discord.ui.Button(
            label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", 
            style=discord.ButtonStyle.danger, 
            custom_id=f"cancel_duel:{duel_id}:{creator_id}"
        ))
    
class MatchView(discord.ui.View):
    def __init__(self, match_id: int, team_a: str, team_b: str, status: str):
        super().__init__(timeout=86400)  # 24-hour timeout
        self.match_id = match_id
        self.team_a = team_a
        self.team_b = team_b
        disabled = status != "–û—Ç–∫—Ä—ã—Ç–∞"
        self.add_item(discord.ui.Button(label=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {team_a}", style=discord.ButtonStyle.success, custom_id=f"bet:A:{match_id}", disabled=disabled))
        self.add_item(discord.ui.Button(label=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {team_b}", style=discord.ButtonStyle.success, custom_id=f"bet:B:{match_id}", disabled=disabled))

class JoinTeamView(discord.ui.View):
    def __init__(self, team_id: int):
        super().__init__(timeout=None)  # Persistent
        self.team_id = team_id
        self.add_item(discord.ui.Button(
            label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", 
            style=discord.ButtonStyle.success, 
            custom_id=f"join_team:{team_id}"
        ))
        # –ï—Å–ª–∏ refresh_btn –Ω—É–∂–µ–Ω: self.add_item(Button(label="–û–±–Ω–æ–≤–∏—Ç—å", style=discord.ButtonStyle.primary, custom_id="refresh")) ‚Äî –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ on_interaction?

class ModeratorDuelView(discord.ui.View):
    def __init__(self, duel_id: int, guild_id: str):
        super().__init__(timeout=None)  # Persistent
        self.duel_id = duel_id
        self.guild_id = guild_id
        
        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º 4 –∫–Ω–æ–ø–∫–∏ —Å custom_id (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        self.add_item(discord.ui.Button(
            label="–ü–æ–±–µ–¥–∏–ª A", 
            style=discord.ButtonStyle.primary, 
            custom_id=f"mod_settle_a:{duel_id}:{guild_id}"
        ))
        self.add_item(discord.ui.Button(
            label="–ü–æ–±–µ–¥–∏–ª B", 
            style=discord.ButtonStyle.primary, 
            custom_id=f"mod_settle_b:{duel_id}:{guild_id}"
        ))
        self.add_item(discord.ui.Button(
            label="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
            style=discord.ButtonStyle.danger, 
            custom_id=f"mod_cancel_result:{duel_id}:{guild_id}"
        ))
        self.add_item(discord.ui.Button(
            label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", 
            style=discord.ButtonStyle.secondary, 
            custom_id=f"mod_cancel_duel:{duel_id}:{guild_id}"
        ))
        logger.info(f"Created ModeratorDuelView for duel={duel_id}, guild={guild_id}, children={len(self.children)}")  # –î–µ–±–∞–≥: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4

    async def on_interaction(self, interaction: discord.Interaction):
        """Handle all button clicks by parsing custom_id."""
        custom_id = interaction.data.get('custom_id', '')
        await interaction.response.defer(ephemeral=True)  # Defer –≤—Å–µ–≥–¥–∞
        
        logger.info(f"Button clicked: custom_id={custom_id}, user={interaction.user.id}")
        
        if not await is_moderator(interaction.user.id, self.guild_id):
            await interaction.followup.send("‚ùå –í—ã –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
            self.disable_all_items()
            await interaction.edit_original_response(view=self)
            return
        
        if custom_id.startswith("mod_settle_a:"):
            await self._handle_settle(interaction, "A")
        elif custom_id.startswith("mod_settle_b:"):
            await self._handle_settle(interaction, "B")
        elif custom_id.startswith("mod_cancel_result:"):
            await self._handle_cancel_result(interaction)
        elif custom_id.startswith("mod_cancel_duel:"):
            await self._handle_cancel_duel(interaction)
        else:
            await interaction.followup.send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.", ephemeral=True)
            self.disable_all_items()
            await interaction.edit_original_response(view=self)

    async def _handle_settle(self, interaction: discord.Interaction, winner_side: str):
        ok, msg = await settle_duel(self.duel_id, winner_side)
        if ok:
            await interaction.followup.send(f"‚úÖ {msg}", ephemeral=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            duel = await get_duel(self.duel_id)
            if duel and duel.get("message_id"):
                channel = bot.get_channel(int(duel["channel_id"]))
                if channel:
                    try:
                        pub_msg = await channel.fetch_message(int(duel["message_id"]))
                        await refresh_duel_message(pub_msg, duel)
                    except Exception as e:
                        logger.error(f"Failed to refresh public after settle {self.duel_id}: {e}")
        else:
            await interaction.followup.send(f"‚ùå {msg}", ephemeral=True)
        self.disable_all_items()
        await interaction.edit_original_response(view=self)

    async def _handle_cancel_result(self, interaction: discord.Interaction):
        await update_duel_status(self.duel_id, "result_canceled")
        duel = await get_duel(self.duel_id)
        await interaction.followup.send("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω.", ephemeral=True)
        if duel and duel.get("message_id"):
            channel = bot.get_channel(int(duel["channel_id"]))
            if channel:
                try:
                    pub_msg = await channel.fetch_message(int(duel["message_id"]))
                    await refresh_duel_message(pub_msg, duel)
                except Exception as e:
                    logger.error(f"Failed to refresh after cancel_result {self.duel_id}: {e}")
        self.disable_all_items()
        await interaction.edit_original_response(view=self)

    async def _handle_cancel_duel(self, interaction: discord.Interaction):
        duel = await get_duel(self.duel_id)
        if duel:
            points = int(duel["points"])
            if duel["type"] == "1v1":
                await add_balance(int(duel["player1_id"]), points)
                if duel["player2_id"]:
                    await add_balance(int(duel["player2_id"]), points)
            else:
                l1 = await get_team_leader(int(duel["team1_id"]))
                l2 = await get_team_leader(int(duel["team2_id"]))
                if l1: await add_balance(l1, points)
                if l2: await add_balance(l2, points)
            await update_duel_status(self.duel_id, "cancelled")
            await interaction.followup.send("‚úÖ –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–∏–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", ephemeral=True)
            if duel.get("message_id"):
                channel = bot.get_channel(int(duel["channel_id"]))
                if channel:
                    try:
                        pub_msg = await channel.fetch_message(int(duel["message_id"]))
                        await refresh_duel_message(pub_msg, duel)
                    except Exception as e:
                        logger.error(f"Failed to refresh after cancel_duel {self.duel_id}: {e}")
        self.disable_all_items()
        await interaction.edit_original_response(view=self)

    def disable_all_items(self):
        for item in self.children:
            item.disabled = True

async def refresh_match_message(interaction: discord.Interaction, match_id: int, edit_message: bool = False):
    """Refresh the match message with updated data."""
    m = await get_match(match_id)
    if not m:
        return
    total_a = int(m["total_a"]) if m["total_a"] else 0
    total_b = int(m["total_b"]) if m["total_b"] else 0
    team_a = m["team_a"]
    team_b = m["team_b"]
    status = m["status"]
    burn = float(m["burn"]) if m["burn"] is not None else DEFAULT_BURN

    EH_EMOJI = "<:EH:1412492188809560196>"

    embed = discord.Embed(title=f"–ú–∞—Ç—á: {team_a} vs {team_b}", color=discord.Color.dark_gray() if status in ["settled", "cancelled"] else discord.Color.blurple())
    embed.add_field(name=f"–ë–∞–Ω–∫ {team_a}", value=f"{total_a} {EH_EMOJI}", inline=True)
    embed.add_field(name=f"–ë–∞–Ω–∫ {team_b}", value=f"{total_b} {EH_EMOJI}", inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status, inline=False)
    embed.set_footer(text=f"match:{match_id}")


    view = MatchView(match_id, team_a, team_b, status)

    try:
        if edit_message and interaction.message:
            await interaction.message.edit(embed=embed, view=view)
        else:
            channel = bot.get_channel(int(m["channel_id"]))
            if channel is not None:
                msg = await channel.fetch_message(int(m["message_id"]))
                await msg.edit(embed=embed, view=view)
    except discord.HTTPException as e:
        logger.error(f"Failed to edit message for match {match_id}: {e}")
        if interaction.response.is_done():
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á–∞.", ephemeral=True)

async def refresh_duel_message(message: discord.Message, duel: dict):
    """Refresh the duel message with updated data."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
    old_embed = message.embeds[0] if message.embeds else None
    screenshot_url = old_embed.image.url if old_embed and old_embed.image else None
    
    embed = await build_duel_embed(duel)
    if screenshot_url:
        embed.set_image(url=screenshot_url)

    guild = message.guild  # –ü–æ–ª—É—á–∞–µ–º guild –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # ---------- –û—Ç–ª–∞–¥–∫–∞ ----------
    logger.info(f"DEBUG duel dict: {duel}")
    logger.info(f"DEBUG duel type: {duel.get('type')} status: {duel.get('status')}")

    # ---------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º—ë–Ω ----------
    winner_a_name = f"–ò–≥—Ä–æ–∫ {duel.get('player1_id', '?')}"
    winner_b_name = f"–ò–≥—Ä–æ–∫ {duel.get('player2_id', '?')}"

    try:
        if duel["type"] == "1v1":
            player1_id = duel.get("player1_id")
            player2_id = duel.get("player2_id")

            if player1_id:
                try:
                    member1 = guild.get_member(int(player1_id)) if guild else None
                    if member1:
                        winner_a_name = member1.display_name
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ player1_id {player1_id}: {e}")

            if player2_id:
                try:
                    member2 = guild.get_member(int(player2_id)) if guild else None
                    if member2:
                        winner_b_name = member2.display_name
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ player2_id {player2_id}: {e}")

        elif duel["type"] == "5v5":
            team1_leader = await get_team_leader(int(duel.get("team1_id", 0)))
            if team1_leader:
                member1 = guild.get_member(team1_leader) if guild else None
                winner_a_name = member1.display_name if member1 else f"–õ–∏–¥–µ—Ä {team1_leader}"

            team2_leader = await get_team_leader(int(duel.get("team2_id", 0)))
            if team2_leader:
                member2 = guild.get_member(team2_leader) if guild else None
                winner_b_name = member2.display_name if member2 else f"–õ–∏–¥–µ—Ä {team2_leader}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–º—ë–Ω: {e}")

    logger.info(f"Names for duel {duel['id']}: A='{winner_a_name}', B='{winner_b_name}'")

    # ---------- –¶–≤–µ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ----------
    if duel.get("status") == "result_canceled":
        embed.color = discord.Color.grey()  # –°–µ—Ä–∞—è –ª–∏–Ω–∏—è
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω", inline=False)  # –ü–æ–¥—Å–∫–∞–∑–∫–∞

    # ---------- –ö–Ω–æ–ø–∫–∏ ----------
    view = discord.ui.View()
    if duel["status"] == "waiting" and not duel["is_public"]:
        invitee_id = duel.get("player2_id") if duel["type"] == "1v1" else await get_team_leader(int(duel.get("team2_id", 0)))
        if invitee_id:
            view.add_item(discord.ui.Button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=discord.ButtonStyle.success, custom_id=f"duel_accept:{duel['id']}:{invitee_id}"))
            view.add_item(discord.ui.Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id=f"duel_decline:{duel['id']}:{invitee_id}"))
    elif duel["status"] == "public" and duel["type"] in ["1v1", "5v5"]:
        view.add_item(discord.ui.Button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=discord.ButtonStyle.success, custom_id=f"join_public_duel:{duel['id']}"))
    elif duel["status"] == "result_pending":
        view = discord.ui.View()
    # ‚úÖ –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å" –ø–æ–ª–Ω–æ—Å—Ç—å—é
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "result_canceled" ‚Äî view –ø—É—Å—Ç–æ–π (–≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø–∞–¥–∞—é—Ç)

    # ---------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
    try:
        await message.edit(embed=embed, view=view)
        logger.info(f"Successfully edited duel message {duel['id']}")
    except Exception as e:
        logger.error(f"Failed to edit duel message {duel['id']}: {e}")




# ---------------------- SLASH COMMANDS ----------------------

async def safe_send(target, **kwargs):
    """Safely send message to channel or user, handling Forbidden and rate limits."""
    if not isinstance(target, discord.abc.Messageable):
        logger.warning(f"Invalid target for safe_send: {type(target)}")
        return None
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            return await target.send(**kwargs)
        except discord.Forbidden:
            logger.warning(f"Cannot send to {target}: DMs closed or no perms")
            return None
        except discord.HTTPException as e:
            if e.status == 429:  # Rate limit
                retry_after = getattr(e, 'retry_after', 1)
                logger.warning(f"Rate limited, retrying in {retry_after}s (attempt {attempt + 1})")
                await asyncio.sleep(retry_after)
                continue
            logger.error(f"HTTP error sending message: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error sending message: {e}")
            if attempt == max_retries - 1:
                return None
            await asyncio.sleep(2 ** attempt)  # Exponential backoff
    return None

async def build_duel_embed(duel: dict) -> discord.Embed:
    embed = discord.Embed(title=f"‚öîÔ∏è –î—É—ç–ª—å: {duel['type']}", color=discord.Color.blue())  # Default blue
    
    # –õ–æ–≥–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if duel["status"] in ["waiting", "public"]:
        embed.color = discord.Color.green()  # –ó–µ–ª–µ–Ω—ã–π: –Ω–æ–≤–∞—è/–æ—Ç–∫—Ä—ã—Ç–∞—è
    elif duel["status"] == "active":
        embed.color = discord.Color.yellow()  # –ñ–µ–ª—Ç—ã–π: –∞–∫—Ç–∏–≤–Ω–∞
    elif duel["status"] == "settled":
        embed.color = discord.Color.red()     # –ö—Ä–∞—Å–Ω—ã–π: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    elif duel["status"] == "cancelled":
        embed.color = discord.Color.dark_grey()  # –°–µ—Ä—ã–π/—á–µ—Ä–Ω—ã–π: –æ—Ç–º–µ–Ω–µ–Ω–∞
    
    if duel.get("screenshot_url"):
        embed.set_image(url=duel["screenshot_url"])
    
    if duel["type"] == "1v1":
        p1 = f"<@{duel.get('player1_id', 'N/A')}>"
        p2 = f"<@{duel.get('player2_id', 'N/A')}> " if duel.get('player2_id') else "–°–≤–æ–±–æ–¥–Ω–æ"
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{p1} vs {p2}", inline=False)
    else:  # 5v5
        team1_id = int(duel.get('team1_id', 0))
        team2_id = int(duel.get('team2_id', 0))
        team1 = await get_team(team1_id)
        team2 = await get_team(team2_id)
        team1_name = team1["name"] if team1 else "–°–≤–æ–±–æ–¥–Ω–æ"
        team2_name = team2["name"] if team2 else "–°–≤–æ–±–æ–¥–Ω–æ"
        embed.add_field(name="–ö–æ–º–∞–Ω–¥—ã", value=f"{team1_name} vs {team2_name}", inline=False)
    
    embed.add_field(name="–°—Ç–∞–≤–∫–∞", value=f"{duel['points']} EH Points", inline=True)
    
    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    status_display = {
        "waiting": "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞",
        "active": "–ê–∫—Ç–∏–≤–Ω–∞",
        "result_pending": "–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
        "settled": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–∞",
        "public": "–û—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        "queued": "–í –æ—á–µ—Ä–µ–¥–∏",
        "processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞"
    }
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status_display.get(duel["status"], duel["status"]), inline=True)
    
    if duel["status"] == "settled":
        winner_side = duel.get("winner_side", "N/A")
        points = duel.get("points", 0)
        total_pot = points * 2
        burned_amount = int(total_pot * DEFAULT_BURN)
        payout = total_pot - burned_amount
        embed.add_field(name="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å", value=f"{winner_side} (+{payout} –ø–æ–∏–Ω—Ç–æ–≤)", inline=False)
        embed.add_field(name="–°–≥–æ—Ä–µ–ª–æ", value=f"{burned_amount} –ø–æ–∏–Ω—Ç–æ–≤", inline=True)
    else:
        hints = {
            "waiting": "–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
            "active": "–î—É—ç–ª—å –∏–¥—ë—Ç! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ /submit_duel.",
            "result_pending": "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞.",
            "cancelled": "–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            "public": "–û—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
            "queued": "–û–∂–∏–¥–∞–Ω–∏–µ –±–æ—Ç–∞ Dota."
        }
        hint = hints.get(duel["status"], "")
        if hint:
            embed.add_field(name="–ü–æ–¥—Å–∫–∞–∑–∫–∞", value=hint, inline=False)

    embed.timestamp = discord.utils.utcnow()
    embed.set_footer(text=f"ID –¥—É—ç–ª–∏: {duel['id']}")
    return embed

async def get_team_steam_ids(team_id: int) -> List[str]:
    """Get SteamIDs for all members of a team. Returns available ones, logs warnings if incomplete."""
    team = await get_team(team_id)
    if not team:
        logger.warning(f"Team {team_id} not found")
        return []
    
    uids = [team["leader_id"]]
    for i in range(1, 6):
        pid = team.get(f"player{i}_id")
        if pid:
            uids.append(pid)
    
    steam_ids = []
    missing = []
    for uid in uids:
        resp = supabase.table("users").select("steam_id").eq("user_id", uid).execute()
        steam_id = resp.data[0].get("steam_id") if resp.data else None
        if steam_id:
            steam_ids.append(steam_id)
        else:
            missing.append(uid)
            logger.warning(f"Missing SteamID for team {team_id} member {uid}")
    
    if len(steam_ids) < 5:
        logger.error(f"Team {team_id} has only {len(steam_ids)}/5 SteamIDs: missing {missing}")
        # –ù–µ raise ‚Äì –ø—É—Å—Ç—å queue_duel —Ä–µ—Ñ–∞–Ω–¥–∏—Ç, –µ—Å–ª–∏ incomplete
    else:
        logger.info(f"Full SteamIDs collected for team {team_id}: {len(steam_ids)}")
    
    return steam_ids


@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥: {len(synced)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type != discord.InteractionType.component:
        return
    if interaction.data['component_type'] != 2:  # Button
        return
    cid = interaction.data['custom_id']
    if cid.startswith("duel_accept:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, duel_id_str, user_id_str = parts
        duel_id = int(duel_id_str)
        user_id = int(user_id_str)
        
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
            
        duel = await get_duel(duel_id)
        if not duel or duel["status"] != "waiting":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
            
        await interaction.response.defer(ephemeral=True)
        await update_duel_invite_status(duel_id, user_id, "accepted")
        updated_duel = await get_duel(duel_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π embed –∏ disabled view
        new_embed = await build_duel_embed(updated_duel)
        new_embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ü—Ä–∏–Ω—è—Ç–æ! –î—É—ç–ª—å –∞–∫—Ç–∏–≤–Ω–∞.", inline=False)
        disabled_view = create_disabled_view("duel_invite")
        
        try:
            await interaction.edit_original_response(embed=new_embed, view=disabled_view)
        except discord.NotFound:
            logger.warning(f"Original message not found for duel accept {duel_id}")
        except Exception as e:
            logger.error(f"Failed to edit duel accept message: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        if updated_duel.get("message_id"):
            channel = bot.get_channel(int(updated_duel["channel_id"]))
            if channel:
                try:
                    msg = await channel.fetch_message(int(updated_duel["message_id"]))
                    await refresh_duel_message(msg, updated_duel)
                except Exception as e:
                    logger.error(f"Error refreshing channel message {duel_id}: {e}")
        
        await interaction.followup.send("‚úÖ –î—É—ç–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", ephemeral=True)
        return

    elif cid.startswith("duel_decline:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, duel_id_str, user_id_str = parts
        duel_id = int(duel_id_str)
        user_id = int(user_id_str)
        
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
            
        duel = await get_duel(duel_id)
        if not duel or duel["status"] != "waiting":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
            
        await interaction.response.defer(ephemeral=True)
        await update_duel_invite_status(duel_id, user_id, "declined")
        updated_duel = await get_duel(duel_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π embed –∏ disabled view
        new_embed = await build_duel_embed(updated_duel)
        new_embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", inline=False)
        disabled_view = create_disabled_view("duel_invite")
        
        try:
            await interaction.edit_original_response(embed=new_embed, view=disabled_view)
        except discord.NotFound:
            logger.warning(f"Original message not found for duel decline {duel_id}")
        except Exception as e:
            logger.error(f"Failed to edit duel decline message: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        if updated_duel.get("message_id"):
            channel = bot.get_channel(int(updated_duel["channel_id"]))
            if channel:
                try:
                    msg = await channel.fetch_message(int(updated_duel["message_id"]))
                    await refresh_duel_message(msg, updated_duel)
                except Exception as e:
                    logger.error(f"Error refreshing channel message {duel_id}: {e}")
        
        await interaction.followup.send("‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)
        return

    elif cid.startswith("team_accept:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, invite_id_str, user_id_str = parts[:3]
        invite_id = int(invite_id_str)
        user_id = int(user_id_str)
        
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        invite_resp = supabase.table("team_invites").select("status, team_id").eq("id", invite_id).execute()
        if not invite_resp.data or invite_resp.data[0]["status"] != "pending":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
            
        team_id = int(invite_resp.data[0]["team_id"])
        team = supabase.table("teams").select("*").eq("id", team_id).execute().data[0]
        player_count = sum(1 for i in range(1, 6) if team.get(f"player{i}_id"))
        if player_count >= 5:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", ephemeral=True)
            return
            
        await interaction.response.defer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        supabase.table("team_invites").update({"status": "accepted"}).eq("id", invite_id).execute()
        updates = {}
        for i in range(1, 6):
            if team.get(f"player{i}_id") is None:
                updates[f"player{i}_id"] = str(user_id)
                break
        if updates:
            supabase.table("teams").update(updates).eq("id", team_id).execute()
            invites = supabase.table("team_invites").select("status").eq("team_id", team_id).execute().data
            if all(invite["status"] == "accepted" for invite in invites):
                supabase.table("teams").update({"status": "confirmed"}).eq("id", team_id).execute()
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
        guild_id = team.get("guild_id")
        if guild_id:
            guild = bot.get_guild(int(guild_id))
            if guild:
                member = guild.get_member(user_id)
                if member:
                    await assign_team_role(guild, member, team["name"])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–∏–¥–µ—Ä–∞
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, content=f"<@{user_id}> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!")
        
        # –£–±–∏—Ä–∞–µ–º view –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        empty_view = discord.ui.View()
        try:
            await interaction.edit_original_response(view=empty_view)
        except Exception as e:
            logger.error(f"Failed to edit team accept message: {e}")
            
        await interaction.followup.send("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return

    elif cid.startswith("team_decline:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, invite_id_str, user_id_str = parts[:3]
        invite_id = int(invite_id_str)
        user_id = int(user_id_str)
        
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
            
        invite_resp = supabase.table("team_invites").select("status").eq("id", invite_id).execute()
        if not invite_resp.data or invite_resp.data[0]["status"] != "pending":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
            
        await interaction.response.defer()
        supabase.table("team_invites").update({"status": "declined"}).eq("id", invite_id).execute()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–∏–¥–µ—Ä–∞
        invite_data = supabase.table("team_invites").select("team_id").eq("id", invite_id).execute().data[0]
        team_id = int(invite_data["team_id"])
        team = supabase.table("teams").select("leader_id").eq("id", team_id).execute().data[0]
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, content=f"<@{user_id}> –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.")
        
        # –£–±–∏—Ä–∞–µ–º view
        empty_view = discord.ui.View()
        try:
            await interaction.edit_original_response(view=empty_view)
        except Exception as e:
            logger.error(f"Failed to edit team decline message: {e}")
            
        await interaction.followup.send("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
        return
    elif cid.startswith("join_public_duel:"):
        _, duel_id_str = cid.split(":", 1)
        duel_id = int(duel_id_str)
        user_id = interaction.user.id
        duel = await get_duel(duel_id)
        points = duel["points"]
        if duel["type"] == "1v1":
            ok, msg = await join_public_duel(duel_id, user_id, None, points)
        else:  # 5v5
            team = await get_user_team(user_id)
            if not team or str(user_id) != team["leader_id"]:
                await interaction.response.send_message("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", ephemeral=True)
                return
            if not await is_team_full_and_confirmed(team):
                await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π.", ephemeral=True)
                return
            ok, msg = await join_public_duel(duel_id, user_id, team["id"], points)
        await interaction.response.send_message(msg, ephemeral=True)
        if ok:
            updated_duel = await get_duel(duel_id)
            await refresh_duel_message(interaction.message, updated_duel)
        return
    elif cid.startswith("cancel_duel:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, duel_id_str, creator_id_str = parts
        duel_id = int(duel_id_str)
        creator_id = int(creator_id_str)
        if interaction.user.id != creator_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥—É—ç–ª–∏ –º–æ–∂–µ—Ç –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å.", ephemeral=True)
            return
        duel = await get_duel(duel_id)
        if duel["status"] not in ["waiting", "public"]:
            await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∏–¥–µ—Ç, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã.", ephemeral=True)
            return
        
        await add_balance(creator_id, int(duel["points"]))  # Refund —Å–æ–∑–¥–∞—Ç–µ–ª—é
        supabase.table("duels").update({"status": "cancelled", "reason": "cancelled_by_creator"}).eq("id", duel_id).execute()
        updated_duel = await get_duel(duel_id)
        await refresh_duel_message(interaction.message, updated_duel)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å invitee, —É–≤–µ–¥–æ–º–∏—Ç—å –≤ DM
        invitee_id = duel.get("player2_id") if duel["type"] == "1v1" else await get_team_leader(int(duel.get("team2_id", 0)))
        if invitee_id:
            invitee_user = bot.get_user(int(invitee_id))
            if invitee_user:
                await safe_send(invitee_user, f"–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º <@{creator_id}>.")
        
        await interaction.response.send_message("‚úÖ –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∏–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", ephemeral=True)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π view —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π view –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥—É—ç–ª–∏
            if duel.get("is_public"):
                # –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –¥—É—ç–ª–∏
                new_view = discord.ui.View()
                new_view.add_item(discord.ui.Button(
                    label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", 
                    style=discord.ButtonStyle.success, 
                    disabled=True
                ))
                new_view.add_item(discord.ui.Button(
                    label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", 
                    style=discord.ButtonStyle.danger, 
                    disabled=True
                ))
            else:
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –¥—É—ç–ª–∏
                new_view = discord.ui.View()
                new_view.add_item(discord.ui.Button(
                    label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", 
                    style=discord.ButtonStyle.danger, 
                    disabled=True
                ))
            
            await interaction.message.edit(view=new_view)
        except Exception as e:
            logger.error(f"Failed to disable cancel button: {e}")
        
        return
    elif cid.startswith("settle_a:"):
        _, duel_id_str = cid.split(":", 1)
        duel_id = int(duel_id_str)
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", ephemeral=True)
            return
        await interaction.response.defer(ephemeral=True)
        logger.info(f"Admin {interaction.user.id} pressed settle_a for duel {duel_id}")
        try:
            ok, msg = await settle_duel(duel_id, "A")
            updated_duel = await get_duel(duel_id)
            logger.info(f"After settle, duel {duel_id} status: {updated_duel['status'] if updated_duel else 'None'}")
            if ok and updated_duel and updated_duel.get("message_id"):
                channel = bot.get_channel(int(updated_duel["channel_id"]))
                if channel:
                    try:
                        msg = await channel.fetch_message(int(updated_duel["message_id"]))
                        await refresh_duel_message(msg, updated_duel)
                        logger.info(f"Message refreshed for duel {duel_id}")
                    except Exception as e:
                        logger.error(f"Error refreshing duel message {duel_id} in settle_a: {e}")
            await interaction.followup.send(msg if 'msg' in locals() else "–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)
        except Exception as e:
            logger.error(f"Error in settle_a for duel {duel_id}: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—É—ç–ª–∏.", ephemeral=True)
        return
    elif cid.startswith("settle_b:"):
        _, duel_id_str = cid.split(":", 1)
        duel_id = int(duel_id_str)
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", ephemeral=True)
            return
        await interaction.response.defer(ephemeral=True)
        logger.info(f"Admin {interaction.user.id} pressed settle_b for duel {duel_id}")
        try:
            ok, msg = await settle_duel(duel_id, "B")
            updated_duel = await get_duel(duel_id)
            logger.info(f"After settle, duel {duel_id} status: {updated_duel['status'] if updated_duel else 'None'}")
            if ok and updated_duel and updated_duel.get("message_id"):
                channel = bot.get_channel(int(updated_duel["channel_id"]))
                if channel:
                    try:
                        msg_obj = await channel.fetch_message(int(updated_duel["message_id"]))
                        await refresh_duel_message(msg_obj, updated_duel)
                        logger.info(f"Message refreshed for duel {duel_id}")
                    except Exception as e:
                        logger.error(f"Error refreshing duel message {duel_id} in settle_b: {e}")
            await interaction.followup.send(msg if 'msg' in locals() else "–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", ephemeral=True)
        except Exception as e:
            logger.error(f"Error in settle_b for duel {duel_id}: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—É—ç–ª–∏.", ephemeral=True)
        return
    elif cid.startswith("cancel_result:"):
        _, duel_id_str = cid.split(":", 1)
        duel_id = int(duel_id_str)
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", ephemeral=True)
            return
        duel = await get_duel(duel_id)
        if not duel or duel["status"] != "result_pending":
            await interaction.response.send_message("–î—É—ç–ª—å –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", ephemeral=True)
            return
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        supabase.table("duels").update({"status": "result_canceled"}).eq("id", duel_id).execute()
        updated_duel = await get_duel(duel_id)
        if updated_duel and updated_duel.get("message_id"):
            channel = bot.get_channel(int(updated_duel["channel_id"]))
            if channel:
                try:
                    msg = await channel.fetch_message(int(updated_duel["message_id"]))
                    await refresh_duel_message(msg, updated_duel)  # –¢–µ–ø–µ—Ä—å embed —Å–µ—Ä—ã–π, view –ø—É—Å—Ç–æ–π, —Å—Ç–∞—Ç—É—Å "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω"
                    logger.info(f"Result canceled for duel {duel_id}")
                except Exception as e:
                    logger.error(f"Error updating message after cancel_result {duel_id}: {e}")
        await interaction.response.send_message("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω. –î—É—ç–ª—å –∑–∞–∫—Ä—ã—Ç–∞.", ephemeral=True)
        return
    elif cid.startswith("team_accept:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, invite_id_str, user_id_str = parts[:3]
        invite_id = int(invite_id_str)
        user_id = int(user_id_str)
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        invite_resp = supabase.table("team_invites").select("status, team_id").eq("id", invite_id).execute()
        if not invite_resp.data or invite_resp.data[0]["status"] != "pending":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
        team_id = int(invite_resp.data[0]["team_id"])
        team = supabase.table("teams").select("*").eq("id", team_id).execute().data[0]
        player_count = sum(1 for i in range(1, 6) if team.get(f"player{i}_id"))
        if player_count >= 5:
            await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", ephemeral=True)
            return
        # Defer to allow editing
        await interaction.response.defer()
        # –û–±–Ω–æ–≤–ª—è–µ–º
        supabase.table("team_invites").update({"status": "accepted"}).eq("id", invite_id).execute()
        updates = {}
        for i in range(1, 6):
            if team.get(f"player{i}_id") is None:
                updates[f"player{i}_id"] = str(user_id)
                break
        if updates:
            supabase.table("teams").update(updates).eq("id", team_id).execute()
            # Check if full now
            invites = supabase.table("team_invites").select("status").eq("team_id", team_id).execute().data
            if all(invite["status"] == "accepted" for invite in invites):
                supabase.table("teams").update({"status": "confirmed"}).eq("id", team_id).execute()
        # Assign role
        guild_id = team.get("guild_id")
        if guild_id:
            guild = bot.get_guild(int(guild_id))
            if guild:
                member = guild.get_member(user_id)
                if member:
                    await assign_team_role(guild, member, team["name"])
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ª–∏–¥–µ—Ä–∞
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, content=f"<@{user_id}> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!")
        # Edit original to remove view
        await interaction.edit_original_response(view=None)
        # Followup confirmation
        await interaction.followup.send("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
    elif cid.startswith("team_decline:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, invite_id_str, user_id_str = parts[:3]
        invite_id = int(invite_id_str)
        user_id = int(user_id_str)
        if interaction.user.id != user_id:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        invite_resp = supabase.table("team_invites").select("status").eq("id", invite_id).execute()
        if not invite_resp.data or invite_resp.data[0]["status"] != "pending":
            await interaction.response.send_message("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.", ephemeral=True)
            return
        # Defer
        await interaction.response.defer()
        supabase.table("team_invites").update({"status": "declined"}).eq("id", invite_id).execute()
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ª–∏–¥–µ—Ä–∞
        invite_data = supabase.table("team_invites").select("team_id").eq("id", invite_id).execute().data[0]
        team_id = int(invite_data["team_id"])
        team = supabase.table("teams").select("leader_id").eq("id", team_id).execute().data[0]
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, content=f"<@{user_id}> –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.")
        # Edit original to remove view
        await interaction.edit_original_response(view=None)
        # Followup
        await interaction.followup.send("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", ephemeral=True)
        return
    elif cid.startswith("join_team:"):
        _, team_id_str = cid.split(":", 1)
        team_id = int(team_id_str)
        user_id = interaction.user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SteamID
        resp = supabase.table("users").select("steam_id").eq("user_id", str(user_id)).execute()
        steam_id = resp.data[0]["steam_id"] if resp.data and resp.data[0].get("steam_id") else None
        if not steam_id:
            await interaction.response.send_message("‚ùå –î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å SteamID.", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
        if await get_user_team(user_id):
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
        team = await get_team(team_id)
        if not team or not team["is_public"]:
            await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—É–±–ª–∏—á–Ω–∞—è.", ephemeral=True)
            return
        player_count = sum(1 for i in range(1, 6) if team.get(f"player{i}_id"))
        if player_count >= 5:
            await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", ephemeral=True)
            return
        # –°–æ–∑–¥–∞—ë–º invite –∏ —Å—Ä–∞–∑—É accept
        now = int(time.time())
        invite_response = supabase.table("team_invites").insert({
            "team_id": team_id,
            "user_id": str(user_id),
            "status": "accepted",
            "created_at": now
        }).execute()
        invite_id = int(invite_response.data[0]["id"])
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ—Ç
        updates = {}
        for i in range(1, 6):
            if team.get(f"player{i}_id") is None:
                updates[f"player{i}_id"] = str(user_id)
                break
        if updates:
            supabase.table("teams").update(updates).eq("id", team_id).execute()
            # Check if full
            invites = supabase.table("team_invites").select("status").eq("team_id", team_id).execute().data
            if all(invite["status"] == "accepted" for invite in invites):
                supabase.table("teams").update({"status": "confirmed"}).eq("id", team_id).execute()
        # Assign role
        guild_id = team.get("guild_id")
        if guild_id:
            guild = bot.get_guild(int(guild_id))
            if guild:
                member = guild.get_member(user_id)
                if member:
                    await assign_team_role(guild, member, team["name"])
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ª–∏–¥–µ—Ä–∞
        leader_id = int(team["leader_id"])
        leader = bot.get_user(leader_id)
        if leader:
            await safe_send(leader, content=f"<@{user_id}> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!")
        # –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ full
        if player_count + 1 >= 5:
            view = interaction.message.view
            for item in view.children:
                if isinstance(item, discord.ui.Button) and item.label == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è":
                    item.disabled = True
            await interaction.message.edit(view=view)
        await interaction.response.send_message("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!", ephemeral=True)
        return
    # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö custom_id - defer —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Discord
    elif cid.startswith("cancel_public_duel:"):
        parts = cid.split(":")
        if len(parts) < 3:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
            return
        _, duel_id_str, creator_id_str = parts
        duel_id = int(duel_id_str)
        creator_id = int(creator_id_str)
        if interaction.user.id != creator_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥—É—ç–ª–∏ –º–æ–∂–µ—Ç –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å.", ephemeral=True)
            return
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã (–∫–∞–∫ –≤ callback)
        duel = await get_duel(duel_id)
        if duel["status"] != "public":
            await interaction.response.send_message("–î—É—ç–ª—å —É–∂–µ –∏–¥–µ—Ç, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã.", ephemeral=True)
            return
        await add_balance(creator_id, int(duel["points"]))
        supabase.table("duels").update({"status": "cancelled", "reason": "cancelled_by_creator"}).eq("id", duel_id).execute()
        updated_duel = await get_duel(duel_id)
        await refresh_duel_message(interaction.message, updated_duel)
        await interaction.response.send_message("‚úÖ –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∏–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", ephemeral=True)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ on_interaction (–¥–æ–±–∞–≤—å—Ç–µ elif):
    elif cid.startswith("manual_mmr:"):
            _, user_id_str = cid.split(":", 1)
            user_id = int(user_id_str)
            if interaction.user.id != user_id:
                await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ.", ephemeral=True)
                return
            modal = MMRModal()  # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MMR –º–æ–¥–∞–ª
            await interaction.response.send_modal(modal)
    elif cid.startswith("bet:"):
        parts = cid.split(":")
        if len(parts) == 3:
            _, team, match_id_str = parts
            match_id = int(match_id_str)
            modal = BetAmountModal(match_id, team)
            await interaction.response.send_modal(modal)
            return
    else:
        try:
            await interaction.response.defer(ephemeral=True)
        except discord.HTTPException:
            pass  # –£–∂–µ acknowledged
    
class MMRModal(Modal, title="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à MMR"):
    mmr = TextInput(label="MMR", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2500")

    async def on_submit(self, interaction: discord.Interaction):
        value = self.mmr.value
        if not value.isdigit() or int(value) <= 0:
            await interaction.response.send_message("‚ùå MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0", ephemeral=True)
            return

        supabase.table("users").update({"mmr": int(value)}).eq("user_id", str(interaction.user.id)).execute()
        await interaction.response.send_message(f"‚úÖ –í–∞—à MMR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}", ephemeral=True)


class SteamIDModal(discord.ui.Modal, title="–í–≤–µ–¥–∏—Ç–µ SteamID (–∞–≤—Ç–æ-MMR)"):
    steam = discord.ui.TextInput(
        label="–í–∞—à SteamID –∏–ª–∏ Account ID",
        placeholder="933834754 (Account ID) –∏–ª–∏ STEAM_0:0:1234567 –∏–ª–∏ 76561197960265728",
        required=True,
        min_length=1,
        max_length=20,
        custom_id="steam_id_input_unique"  # Unique –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            steam_input = self.steam.value.strip()
            # –ù–æ–≤—ã–π regex: account ID (7-10 digits), STEAM_0 –∏–ª–∏ 64-bit
            if not re.match(r'^\d{7,10}$|STEAM_0:\d:\d+|7656119\d{10}$', steam_input):
                await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: 933834754 (Account ID), STEAM_0:0:1234567 –∏–ª–∏ 76561197960265728", ephemeral=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º MMR (–∞–≤—Ç–æ, —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º)
            mmr = await get_mmr_from_steamid(steam_input, interaction.user.id)
            
            # SteamID –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (response check)
            response = supabase.table("users").update({"steam_id": steam_input}).eq("user_id", str(interaction.user.id)).execute()
            if not response.data:
                logger.warning(f"Failed to save steam_id for {interaction.user.id}")
            
            if mmr is not None:
                await interaction.response.send_message(f"‚úÖ –í–∞—à SteamID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {steam_input}", ephemeral=True)
                logger.info(f"Success: SteamID {steam_input} for {interaction.user.id}, MMR {mmr}")
            else:
                await interaction.response.send_message(f"‚úÖ –í–∞—à SteamID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {steam_input}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MMR. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –≤ Dota 2.", ephemeral=True)
                logger.warning(f"SteamID set but no MMR for {interaction.user.id}: {steam_input}")
        except Exception as e:
            logger.error(f"Error in SteamIDModal for {interaction.user.id}: {e}")
            await interaction.response.send_message("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.", ephemeral=True)


class RegisterView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Persistent

    @discord.ui.button(label="–í–≤–µ—Å—Ç–∏ SteamID (–∞–≤—Ç–æ-MMR)", style=discord.ButtonStyle.primary, custom_id="register_steam_unique")
    async def steam_button(self, interaction: discord.Interaction, button: Button):
        try:
            await interaction.response.send_modal(SteamIDModal())
        except discord.HTTPException as e:
            logger.error(f"HTTP error sending modal: {e}")
            if "50035" in str(e) or "duplicated" in str(e).lower():
                await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)
        except Exception as e:
            logger.error(f"Unexpected error in steam_button: {e}")
            await interaction.response.send_message("‚ùå –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", ephemeral=True)


# –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
moderator_group = app_commands.Group(name="moderator", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥—É—ç–ª–µ–π")

@moderator_group.command(name="add", description="–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
@admin_only
async def moderator_add(interaction: discord.Interaction, user: discord.User):
    if await is_moderator(user.id, str(interaction.guild.id)):
        await interaction.response.send_message("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
        return
    if await add_moderator(user.id, str(interaction.guild.id)):
        await interaction.response.send_message(f"‚úÖ {user.mention} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", ephemeral=True)

@moderator_group.command(name="kick", description="–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
@admin_only
async def moderator_kick(interaction: discord.Interaction, user: discord.User):
    if not await is_moderator(user.id, str(interaction.guild.id)):
        await interaction.response.send_message("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.", ephemeral=True)
        return
    if await remove_moderator(user.id, str(interaction.guild.id)):
        await interaction.response.send_message(f"‚úÖ {user.mention} —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", ephemeral=True)

@moderator_group.command(name="list", description="–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
@admin_only
async def moderator_list(interaction: discord.Interaction):
    mods = await get_moderators(str(interaction.guild.id))
    if not mods:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.", ephemeral=True)
        return
    desc = "\n".join([f"<@{uid}>" for uid in mods])
    embed = discord.Embed(title="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –¥—É—ç–ª–µ–π", description=desc, color=discord.Color.orange())
    await interaction.response.send_message(embed=embed, ephemeral=True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –≤ on_ready –∏–ª–∏ –ø–æ—Å–ª–µ bot=...
bot.tree.add_command(moderator_group)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.tree.command(name="setup_register", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
@app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π)")
@admin_only
async def setup_register(interaction: discord.Interaction, channel: Optional[discord.TextChannel] = None):
    target_channel = channel or interaction.channel
    if not target_channel:
        await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ REGISTER_MESSAGE_ID –≤ .env)
    register_msg_id = os.getenv("REGISTER_MESSAGE_ID")
    if register_msg_id:
        try:
            msg = await target_channel.fetch_message(int(register_msg_id))
            await interaction.response.send_message(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {msg.jump_url}", ephemeral=True)
            return
        except discord.NotFound:
            pass  # –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ

    embed = discord.Embed(
        title="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!",
        description="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥—É—ç–ª—è–º –∏ –∫–æ–º–∞–Ω–¥–∞–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\n‚Ä¢ –£–∫–∞–∂–∏—Ç–µ SteamID\n\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö! üöÄ",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)

    view = RegisterView()
    await target_channel.send(embed=embed, view=view)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID –≤ env –∏–ª–∏ –ë–î (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –≤ —Ñ–∞–π–ª, –Ω–æ –ª—É—á—à–µ –≤ Supabase)
    with open('.register_msg_id', 'w') as f:
        f.write(str(target_channel.last_message.id))
    
    await interaction.response.send_message(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_channel.mention}!", ephemeral=True)

@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤")
@app_commands.describe(user="–ß–µ–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ –≤–∞—à)")
async def balance_cmd(interaction: discord.Interaction, user: Optional[discord.Member] = None):
    target = user or interaction.user
    bal = await get_balance(target.id)
    if user:
        await interaction.response.send_message(
            f"–ë–∞–ª–∞–Ω—Å {target.mention}: **{bal}** –ø–æ–∏–Ω—Ç–æ–≤", ephemeral=True
        )
    else:
        await interaction.response.send_message(
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{bal}** –ø–æ–∏–Ω—Ç–æ–≤", ephemeral=True
        )

@bot.tree.command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É")
async def leaderboard_cmd(interaction: discord.Interaction):
    data = supabase.table("users").select("user_id,balance").order("balance", desc=True).limit(100).execute().data
    if not data:
        await interaction.response.send_message("‚ùå –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç.", ephemeral=True)
        return

    view = LeaderboardView(data)

    # –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç ‚Äî —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    await interaction.response.send_message("–ó–∞–≥—Ä—É–∑–∫–∞...", view=view, ephemeral=True)

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–∑–≤–∞–≤—à–µ–≥–æ
    msg = await interaction.original_response()
    start = 0
    end = view.per_page
    chunk = data[start:end]

    desc = "\n".join(
        [f"**{i+1}.** <@{row['user_id']}> ‚Äî {row['balance']}üí∞" for i, row in enumerate(chunk, start=start)]
    )

    embed = discord.Embed(
        title=f"üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Å—Ç—Ä. 1/{view.max_page+1})",
        description=desc,
        color=discord.Color.gold()
    )
    await msg.edit(content=None, embed=embed, view=view)

@bot.tree.command(name="teams", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
async def teams_cmd(interaction: discord.Interaction):
    data = supabase.table("teams").select("id,name,leader_id,status,is_public,player1_id,player2_id,player3_id,player4_id,player5_id").order("created_at", desc=True).execute().data
    if not data:
        await interaction.response.send_message("‚ùå –ö–æ–º–∞–Ω–¥ –Ω–µ—Ç.", ephemeral=True)
        return

    view = TeamsView(data)

    # Send initial response (private)
    await interaction.response.send_message("–ó–∞–≥—Ä—É–∑–∫–∞...", view=view, ephemeral=True)

    # Edit response with team list
    msg = await interaction.original_response()
    start = 0
    end = view.per_page
    chunk = data[start:end]

    players_list = []
    for i, row in enumerate(chunk, start=start):
        players = [row.get(f'player{j}_id') for j in range(1, 6) if row.get(f'player{j}_id')]
        participants_str = " ".join([f"<@{p}>" for p in players if p != row['leader_id']]) if players else "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        players_list.append(
            f"**{i + 1}. {row['name']}**"
            f"üëë **–õ–∏–¥–µ—Ä:** <@{row['leader_id']}>\n"
            f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants_str}"
        )

    desc = "\n\n".join(players_list) or "–ù–µ—Ç –∫–æ–º–∞–Ω–¥"

    embed = discord.Embed(
        title=f"üë• –ö–æ–º–∞–Ω–¥—ã (—Å—Ç—Ä. 1/{view.max_page+1})",
        description=desc,
        color=discord.Color.blue()
    )
    await msg.edit(content=None, embed=embed, view=view)


@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="grant", description="–í—ã–¥–∞—Ç—å –ø–æ–∏–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)")
@app_commands.describe(user="–ö–æ–º—É –≤—ã–¥–∞—Ç—å", amount="–°–∫–æ–ª—å–∫–æ –ø–æ–∏–Ω—Ç–æ–≤ –≤—ã–¥–∞—Ç—å (+/-)")
@admin_only
async def grant_cmd(interaction: discord.Interaction, user: discord.User, amount: int):
    if amount == 0:
        await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–Ω—É–ª–µ–≤–æ–π.", ephemeral=True)
        return

    await add_balance(user.id, amount)
    new_bal = await get_balance(user.id)
    await interaction.response.send_message(
        f"–í—ã–¥–∞–Ω–æ {amount} –ø–æ–∏–Ω—Ç–æ–≤ {user.mention}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal}",
        ephemeral=True
    )


@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="bid", description="–°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏")
@app_commands.describe(team_a="–ö–æ–º–∞–Ω–¥–∞ A", team_b="–ö–æ–º–∞–Ω–¥–∞ B", burn="–î–æ–ª—è —Å–≥–æ—Ä–∞–Ω–∏—è (0.2-0.3), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.25")
@admin_only
async def bid_cmd(interaction: discord.Interaction, team_a: str, team_b: str, burn: Optional[float] = None):
    b = DEFAULT_BURN if burn is None else float(burn)
    if b < 0 or b > 0.9:
        await interaction.response.send_message("burn –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 0.9", ephemeral=True)
        return

    match_id = await create_match(interaction.channel_id, team_a, team_b, b)

    embed = discord.Embed(title=f"–ú–∞—Ç—á: {team_a} vs {team_b}", color=discord.Color.blurple())
    embed.add_field(name=f"–ë–∞–Ω–∫ {team_a}", value="0 –ø–æ–∏–Ω—Ç–æ–≤", inline=True)
    embed.add_field(name=f"–ë–∞–Ω–∫ {team_b}", value="0 –ø–æ–∏–Ω—Ç–æ–≤", inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û—Ç–∫—Ä—ã—Ç–∞", inline=False)
    embed.set_footer(text=f"match:{match_id}")

    view = MatchView(match_id, team_a, team_b, "–û—Ç–∫—Ä—ã—Ç–∞")

    await interaction.response.send_message(embed=embed, view=view)
    msg = await interaction.original_response()
    await set_match_message(match_id, msg.id)

@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="close_bet", description="–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ (–±–µ–∑ —Ä–∞—Å—á–µ—Ç–∞)")
@app_commands.describe(match_id="ID –º–∞—Ç—á–∞")
@admin_only
async def close_bet_cmd(interaction: discord.Interaction, match_id: int):
    ok, msg = await close_bet(match_id)
    await interaction.response.send_message(msg)
    if ok:
        await refresh_match_message(interaction, match_id)

@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="cancel_bet", description="–û—Ç–º–µ–Ω–∏—Ç—å –º–∞—Ç—á –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ–º —Å—Ç–∞–≤–∫–∏")
@app_commands.describe(match_id="ID –º–∞—Ç—á–∞")
@admin_only
async def cancel_bet_cmd(interaction: discord.Interaction, match_id: int):
    ok, msg, _ = await cancel_bet(match_id)
    await interaction.response.send_message(msg)
    if ok:
        await refresh_match_message(interaction, match_id)

@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="settle_bet", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á: —É–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç—å")
@app_commands.describe(match_id="ID –º–∞—Ç—á–∞", winner="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: A –∏–ª–∏ B")
@admin_only
async def settle_bet_cmd(interaction: discord.Interaction, match_id: int, winner: str):
    ok, msg = await settle_bet(match_id, winner)
    await interaction.response.send_message(msg)
    if ok:
        await refresh_match_message(interaction, match_id)

# –ü–æ–ª–Ω—ã–π duel_cmd —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CancelDuelView (–¥–ª—è private –±–ª–æ–∫–æ–≤)
@bot.tree.command(name="duel", description="–°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å")
@app_commands.describe(
    type="–¢–∏–ø –¥—É—ç–ª–∏ (1v1 –∏–ª–∏ 5v5)",
    points="–°—Ç–∞–≤–∫–∞ –ø–æ–∏–Ω—Ç–æ–≤ (50-200)",
    opponent="–û–ø–ø–æ–Ω–µ–Ω—Ç (–∏–≥—Ä–æ–∫ –¥–ª—è 1v1 –∏–ª–∏ –ª–∏–¥–µ—Ä –¥–ª—è 5v5; –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å ‚Äî –ø—É–±–ª–∏—á–Ω–∞—è –¥—É—ç–ª—å)"
)
@app_commands.choices(
    type=[
        app_commands.Choice(name="1v1", value="1v1"),
        app_commands.Choice(name="5v5", value="5v5")
    ]
)
async def duel_cmd(interaction: discord.Interaction, type: str, points: int = 100, opponent: Optional[discord.Member] = None):
    user_id = interaction.user.id
    bal = await get_balance(user_id)
    try:
        if points < 50 or points > 200:
            await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 50-200 –ø–æ–∏–Ω—Ç–æ–≤.", ephemeral=True)
            return

        if bal < points:
            await interaction.response.send_message(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤: {bal}.", ephemeral=True)
            return

        # ‚úÖ –ù–æ–≤—ã–π check: –Ω–µ—Ç –ª–∏ pending –¥—É—ç–ª–∏
        pending_duel_id = await has_pending_duel(user_id)
        if pending_duel_id:
            await interaction.response.send_message(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –¥—É—ç–ª—å #{pending_duel_id}. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.", ephemeral=True)
            return

        is_public = opponent is None

        if type == "1v1":
            if not is_public and opponent is None:
                await interaction.response.send_message("–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π 1v1 —É–∫–∞–∂–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.", ephemeral=True)
                return
            if opponent and opponent.id == user_id:
                await interaction.response.send_message("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è.", ephemeral=True)
                return
            if not is_public:
                # Optional: check pending –¥–ª—è opponent
                opp_pending = await has_pending_duel(opponent.id)
                if opp_pending:
                    await interaction.response.send_message(f"–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –¥—É—ç–ª—å #{opp_pending}.", ephemeral=True)
                    return
                if not await check_duel_limit(opponent.id):
                    await interaction.response.send_message("–û–ø–ø–æ–Ω–µ–Ω—Ç —É–∂–µ –¥—É—ç–ª–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è.", ephemeral=True)
                    return
                opponent_bal = await get_balance(opponent.id)
                if opponent_bal < points:
                    await interaction.response.send_message(f"–£ {opponent.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {opponent_bal}.", ephemeral=True)
                    return
                await add_balance(user_id, -points)
                duel_id = await create_duel(interaction.channel_id, player1_id=user_id, player2_id=opponent.id, points=points, duel_type="1v1", is_public=False, creator_user_id=user_id)
                # DM to opponent
                opponent_user = opponent
                embed = await build_duel_embed(await get_duel(duel_id))
                view = DuelInviteView(duel_id, opponent.id)
                await safe_send(opponent_user, embed=embed, view=view)
                # Main response
                embed = await build_duel_embed(await get_duel(duel_id))
                view = CancelDuelView(duel_id, user_id)  # –ò–ª–∏ PublicDuelView –¥–ª—è private? Adjust
                await interaction.response.send_message(embed=embed, view=view)
                msg = await interaction.original_response()
                await set_duel_message(duel_id, msg.id)
            else:  # public 1v1
                await add_balance(user_id, -points)
                duel_id = await create_duel(interaction.channel_id, player1_id=user_id, points=points, duel_type="1v1", is_public=True, creator_user_id=user_id)
                await interaction.response.defer()
                await interaction.followup.send("–°–æ–∑–¥–∞—ë—Ç—Å—è –ø—É–±–ª–∏—á–Ω–∞—è –¥—É—ç–ª—å (–±–µ–∑ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞).", ephemeral=True)
                embed = await build_duel_embed(await get_duel(duel_id))
                view = PublicDuelView(duel_id, user_id)
                await interaction.edit_original_response(embed=embed, view=view)
                await set_duel_message(duel_id, interaction.message.id if interaction.message else 0)
                asyncio.create_task(auto_refund_public_duel(duel_id, user_id, points))

        else:  # 5v5
            user_team = await get_user_team(user_id)
            if not user_team or str(user_id) != user_team["leader_id"]:
                await interaction.response.send_message("–î–ª—è 5v5 –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
                return
            if not await is_team_full_and_confirmed(user_team):
                await interaction.response.send_message("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π.", ephemeral=True)
                return
            if not is_public:
                if opponent is None:
                    await interaction.response.send_message("–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π 5v5 —É–∫–∞–∂–∏—Ç–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–ª–∏–¥–µ—Ä–∞).", ephemeral=True)
                    return
                opponent_team = await get_user_team(opponent.id)
                if not opponent_team or str(opponent.id) != opponent_team["leader_id"]:
                    await interaction.response.send_message("–û–ø–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
                    return
                if not await is_team_full_and_confirmed(opponent_team):
                    await interaction.response.send_message("–ö–æ–º–∞–Ω–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –ø–æ–ª–Ω–∞—è.", ephemeral=True)
                    return
                # Optional: check pending –¥–ª—è opponent
                opp_pending = await has_pending_duel(opponent.id)
                if opp_pending:
                    await interaction.response.send_message(f"–£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –¥—É—ç–ª—å #{opp_pending}.", ephemeral=True)
                    return
                if not await check_duel_limit(opponent.id):
                    await interaction.response.send_message("–õ–∏–¥–µ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —É–∂–µ –¥—É—ç–ª–∏–ª—Å—è —Å–µ–≥–æ–¥–Ω—è.", ephemeral=True)
                    return
                opponent_bal = await get_balance(opponent.id)
                if opponent_bal < points:
                    await interaction.response.send_message(f"–£ –ª–∏–¥–µ—Ä–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {opponent_bal}.", ephemeral=True)
                    return
                await add_balance(user_id, -points)
                duel_id = await create_duel(interaction.channel_id, team1_id=user_team["id"], team2_id=opponent_team["id"], points=points, duel_type="5v5", is_public=False, creator_user_id=user_id)
                embed = await build_duel_embed(await get_duel(duel_id))
                view = DuelInviteView(duel_id, opponent.id)
                await safe_send(opponent, embed=embed, view=view)
                embed = await build_duel_embed(await get_duel(duel_id))
                view = CancelDuelView(duel_id, user_id)
                await interaction.response.send_message(embed=embed, view=view)
                msg = await interaction.original_response()
                await set_duel_message(duel_id, msg.id)
            else:  # public 5v5
                await add_balance(user_id, -points)
                duel_id = await create_duel(interaction.channel_id, team1_id=user_team["id"], points=points, duel_type="5v5", is_public=True, creator_user_id=user_id)
                await interaction.response.defer()
                await interaction.followup.send("–°–æ–∑–¥–∞—ë—Ç—Å—è –ø—É–±–ª–∏—á–Ω–∞—è –¥—É—ç–ª—å (–±–µ–∑ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞).", ephemeral=True)
                embed = await build_duel_embed(await get_duel(duel_id))
                view = PublicDuelView(duel_id, user_id)
                await interaction.edit_original_response(embed=embed, view=view)
                await set_duel_message(duel_id, interaction.message.id if interaction.message else 0)
                asyncio.create_task(auto_refund_public_duel(duel_id, user_id, points))

    except Exception as e:
        logger.error(f"Error in duel_cmd for user {user_id}: {e}")
        try:
            if interaction.response.is_done():
                await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏: {str(e)[:100]}...", ephemeral=True)
            else:
                await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏: {str(e)[:100]}...", ephemeral=True)
        except:
            pass
        if bal >= points:
            await add_balance(user_id, points)



async def refresh_duel_message(message: discord.Message, duel: dict):
    """Refresh the duel message with updated data."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
    old_embed = message.embeds[0] if message.embeds else None
    screenshot_url = old_embed.image.url if old_embed and old_embed.image else None
    
    embed = await build_duel_embed(duel)
    if screenshot_url:
        embed.set_image(url=screenshot_url)

    guild = message.guild  # –ü–æ–ª—É—á–∞–µ–º guild –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º—ë–Ω –¥–ª—è –∫–Ω–æ–ø–æ–∫
    winner_a_name = f"–ò–≥—Ä–æ–∫ {duel.get('player1_id', '?')}"
    winner_b_name = f"–ò–≥—Ä–æ–∫ {duel.get('player2_id', '?')}"

    try:
        if duel["type"] == "1v1":
            player1_id = duel.get("player1_id")
            player2_id = duel.get("player2_id")

            if player1_id:
                try:
                    member1 = guild.get_member(int(player1_id)) if guild else None
                    if member1:
                        winner_a_name = member1.display_name
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ player1_id {player1_id}: {e}")

            if player2_id:
                try:
                    member2 = guild.get_member(int(player2_id)) if guild else None
                    if member2:
                        winner_b_name = member2.display_name
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ player2_id {player2_id}: {e}")

        elif duel["type"] == "5v5":
            team1_leader = await get_team_leader(int(duel.get("team1_id", 0)))
            if team1_leader:
                member1 = guild.get_member(team1_leader) if guild else None
                winner_a_name = member1.display_name if member1 else f"–õ–∏–¥–µ—Ä {team1_leader}"

            team2_leader = await get_team_leader(int(duel.get("team2_id", 0)))
            if team2_leader:
                member2 = guild.get_member(team2_leader) if guild else None
                winner_b_name = member2.display_name if member2 else f"–õ–∏–¥–µ—Ä {team2_leader}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∏–º—ë–Ω: {e}")

    logger.info(f"Names for duel {duel['id']}: A='{winner_a_name}', B='{winner_b_name}'")

    # –¶–≤–µ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if duel.get("status") == "result_canceled":
        embed.color = discord.Color.grey()  # –°–µ—Ä–∞—è –ª–∏–Ω–∏—è
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω", inline=False)  # –ü–æ–¥—Å–∫–∞–∑–∫–∞

    # ---------- –ö–Ω–æ–ø–∫–∏ ----------
    view = discord.ui.View()
    
    if duel["status"] == "waiting" and not duel["is_public"]:
        invitee_id = duel.get("player2_id") if duel["type"] == "1v1" else await get_team_leader(int(duel.get("team2_id", 0)))
        if invitee_id:
            view.add_item(discord.ui.Button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=discord.ButtonStyle.success, custom_id=f"duel_accept:{duel['id']}:{invitee_id}"))
            view.add_item(discord.ui.Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id=f"duel_decline:{duel['id']}:{invitee_id}"))
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è waiting —Å—Ç–∞—Ç—É—Å–∞
            view.add_item(discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.secondary, custom_id=f"cancel_duel:{duel['id']}:{duel.get('creator_id', 0)}"))
    
    elif duel["status"] == "public" and duel["type"] in ["1v1", "5v5"]:
        view.add_item(discord.ui.Button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=discord.ButtonStyle.success, custom_id=f"join_public_duel:{duel['id']}"))
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è public —Å—Ç–∞—Ç—É—Å–∞
        view.add_item(discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", style=discord.ButtonStyle.secondary, custom_id=f"cancel_public_duel:{duel['id']}:{duel.get('creator_id', 0)}"))
    
    elif duel["status"] == "result_pending":
        view.add_item(discord.ui.Button(label=f"–ü–æ–±–µ–¥–∏–ª {winner_a_name}", style=discord.ButtonStyle.primary, custom_id=f"settle_a:{duel['id']}"))
        view.add_item(discord.ui.Button(label=f"–ü–æ–±–µ–¥–∏–ª {winner_b_name}", style=discord.ButtonStyle.primary, custom_id=f"settle_b:{duel['id']}"))
        view.add_item(discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", style=discord.ButtonStyle.danger, custom_id=f"cancel_result:{duel['id']}"))
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å" –¥–ª—è result_pending
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (active, settled, cancelled, result_canceled) 
    # –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å" –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è

    # ---------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
    try:
        await message.edit(embed=embed, view=view)
        logger.info(f"Successfully edited duel message {duel['id']}")
    except Exception as e:
        logger.error(f"Failed to edit duel message {duel['id']}: {e}")



@bot.tree.command(name="create_team", description="–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
@app_commands.describe(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", public="–ü—É–±–ª–∏—á–Ω–∞—è (true) –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è (false) –∫–æ–º–∞–Ω–¥–∞")
async def create_team_cmd(interaction: discord.Interaction, name: str, public: bool = False):
    # Check if user has SteamID
    response = supabase.table("users").select("steam_id").eq("user_id", str(interaction.user.id)).execute()
    steam_id = response.data[0]["steam_id"] if response.data and response.data[0].get("steam_id") else None
    if not steam_id:
        await interaction.response.send_message("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å SteamID —á–µ—Ä–µ–∑ /steamid.", ephemeral=True)
        return

    # Check if user is already in a team
    existing_team = await get_user_team(interaction.user.id)
    if existing_team:
        await interaction.response.send_message("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        return

    # Create team role
    role = await ensure_team_role(interaction.guild, name)
    if not role:
        await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return
    await interaction.user.add_roles(role)

    # Create team in database
    now = int(time.time())
    team_response = supabase.table("teams").insert({
        "leader_id": str(interaction.user.id),
        "player1_id": str(interaction.user.id),  # Leader as player1
        "name": name,
        "status": "pending",
        "is_public": public,
        "guild_id": str(interaction.guild.id),  # –î–æ–±–∞–≤–ª—è–µ–º guild_id
        "created_at": now
    }).execute()
    team_id = team_response.data[0]["id"]

    # Add leader to team_invites
    supabase.table("team_invites").insert({
        "team_id": team_id,
        "user_id": str(interaction.user.id),
        "status": "accepted",
        "created_at": now
    }).execute()

    # Send private confirmation to the leader
    embed = discord.Embed(title="–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!", color=discord.Color.green())
    embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=name, inline=False)
    embed.add_field(name="–õ–∏–¥–µ—Ä", value=f"<@{interaction.user.id}>", inline=False)
    embed.add_field(name="–¢–∏–ø", value="–ü—É–±–ª–∏—á–Ω–∞—è" if public else "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è", inline=False)
    embed.set_footer(text=f"team:{team_id}")
    await interaction.response.send_message(embed=embed, ephemeral=True)

    # Announce public team in the designated channel
    if public:
        channel_id = TEAM_ANNOUNCEMENT_CHANNEL or str(interaction.channel_id)
        channel = bot.get_channel(int(channel_id))
        if not channel:
            logger.warning(f"Could not find team announcement channel {channel_id}")
            return

        embed = discord.Embed(title=f"–ù–æ–≤–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {name}", color=discord.Color.blue())
        embed.add_field(name="–õ–∏–¥–µ—Ä", value=f"<@{interaction.user.id}>", inline=False)
        embed.add_field(name="–ò–≥—Ä–æ–∫–∏", value=f"<@{interaction.user.id}>", inline=False)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="pending", inline=False)
        embed.set_footer(text=f"team:{team_id}")
        view = JoinTeamView(team_id)
        msg = await safe_send(channel, embed=embed, view=view)
        if msg:
            supabase.table("teams").update({"announcement_message_id": msg.id}).eq("id", team_id).execute()


@bot.tree.command(name="invite_member", description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É")
@app_commands.describe(
    user1="–ò–≥—Ä–æ–∫ 1",
    user2="–ò–≥—Ä–æ–∫ 2",
    user3="–ò–≥—Ä–æ–∫ 3",
    user4="–ò–≥—Ä–æ–∫ 4"
)
async def invite_member_cmd(
    interaction: discord.Interaction,
    user1: Optional[discord.Member] = None,
    user2: Optional[discord.Member] = None,
    user3: Optional[discord.Member] = None,
    user4: Optional[discord.Member] = None
):
    team = await get_user_team(interaction.user.id)
    if not team or str(interaction.user.id) != team["leader_id"]:
        await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", ephemeral=True)
        return

    users = [u for u in [user1, user2, user3, user4] if u]
    if not users:
        await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.", ephemeral=True)
        return

    for u in users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SteamID
        resp = supabase.table("users").select("steam_id").eq("user_id", str(u.id)).execute()
        steam_id = resp.data[0]["steam_id"] if resp.data and resp.data[0].get("steam_id") else None
        if not steam_id:
            await interaction.response.send_message(f"‚ùå –£ {u.mention} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SteamID.", ephemeral=True)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
        if await get_user_team(u.id):
            await interaction.response.send_message(f"‚ùå {u.mention} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π invite
        existing = supabase.table("team_invites") \
            .select("id,status") \
            .eq("team_id", team["id"]) \
            .eq("user_id", str(u.id)) \
            .execute().data

        invite_id = None
        if existing:
            if existing[0]["status"] in ("pending", "accepted"):
                await interaction.response.send_message(
                    f"‚ùå {u.mention} —É–∂–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                    ephemeral=True
                )
                continue
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                invite_id = int(existing[0]["id"])
                supabase.table("team_invites").update({
                    "status": "pending",
                    "created_at": int(time.time())
                }).eq("id", invite_id).execute()
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            response = supabase.table("team_invites").insert({
                "team_id": team["id"],
                "user_id": str(u.id),
                "status": "pending",
                "created_at": int(time.time())
            }).execute()
            invite_id = int(response.data[0]["id"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° —Å View
        view = TeamInviteView(invite_id, u.id)
        embed = discord.Embed(title="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É!", color=discord.Color.blue())
        embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞", value=team["name"], inline=False)
        embed.add_field(name="–õ–∏–¥–µ—Ä", value=f"<@{interaction.user.id}>", inline=False)
        embed.set_footer(text=f"team:{team['id']}:{u.id}")

        try:
            await safe_send(u, embed=embed, view=view)
            await interaction.response.send_message(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {u.mention}.", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {u.mention} (–õ–° –∑–∞–∫—Ä—ã—Ç—ã).", ephemeral=True)


@bot.tree.command(name="check_team", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã")
async def check_team_cmd(interaction: discord.Interaction):
    # Send initial response to avoid timeout
    await interaction.response.send_message("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã...", ephemeral=True)

    # Fetch team
    team = await get_user_team(interaction.user.id)
    if not team:
        msg = await interaction.original_response()
        await msg.edit(content="‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
        return

    # Create embed
    embed = discord.Embed(title=f"–ö–æ–º–∞–Ω–¥–∞: {team['name']}", color=discord.Color.blue())
    
    # Set leader's avatar as thumbnail
    if interaction.guild:
        leader_member = interaction.guild.get_member(int(team["leader_id"]))
        if leader_member:
            embed.set_thumbnail(url=leader_member.display_avatar.url)
    
    embed.add_field(name="–õ–∏–¥–µ—Ä", value=f"<@{team['leader_id']}>", inline=False)
    
    # Fetch players
    players = [team.get(f"player{i}_id") for i in range(1, 6) if team.get(f"player{i}_id")]
    if players:
        for i, player_id in enumerate(players, 1):
            embed.add_field(name=f"–ò–≥—Ä–æ–∫ {i}", value=f"<@{player_id}>", inline=True)
    else:
        embed.add_field(name="–ò–≥—Ä–æ–∫–∏", value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤", inline=False)
    
    embed.add_field(name="–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã", value=team["status"], inline=False)
    embed.add_field(name="–¢–∏–ø", value="–ü—É–±–ª–∏—á–Ω–∞—è" if team["is_public"] else "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è", inline=False)
    embed.set_footer(text=f"team:{team['id']}")

    # Edit original message
    msg = await interaction.original_response()
    await msg.edit(content=None, embed=embed)

@bot.tree.command(name="profile", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞")
@app_commands.describe(user="–ß–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, —Ç–æ –≤–∞—à)")
async def profile_cmd(interaction: discord.Interaction, user: Optional[discord.Member] = None):
    # –°—Ä–∞–∑—É –¥–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ç–∞–π–º–∞—É—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    await interaction.response.send_message("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...", ephemeral=True)

    # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—é —Ä–∞–±–æ—Ç—É
    target = user or interaction.user

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ
    await ensure_user(target.id, target.display_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    resp = supabase.table("users").select("steam_id, mmr").eq("user_id", str(target.id)).execute()
    user_data = resp.data[0] if resp.data else {}
    steam_id = user_data.get("steam_id")
    mmr_value = user_data.get("mmr", 0)

    if mmr_value != 0 and mmr_value is not None:
        # –†—É—á–Ω–æ–π MMR –∏–∑ –ë–î ‚Üí —ç–º–æ–¥–∑–∏ –ø–æ —á–∏—Å–ª—É
        rank_display = get_rank_emoji(int(mmr_value))
    else:
        # Fallback: —Ç—è–Ω–µ–º rank_tier –∏–∑ API, –µ—Å–ª–∏ SteamID –µ—Å—Ç—å
        if steam_id:
            rank_tier = await get_rank_tier_from_steamid(steam_id)
            if rank_tier is not None:
                rank_display = get_rank_emoji_from_tier(rank_tier)
            else:
                rank_display = "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
        else:
            rank_display = "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
    team = await get_user_team(target.id)
    team_name = team["name"] if team else "–ù–µ —Å–æ—Å—Ç–æ–∏—Ç"

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä: –µ—Å–ª–∏ –≤ –≥–∏–ª—å–¥–∏–∏, –ø–æ–ª—å–∑—É–µ–º—Å—è display_avatar
    avatar_url = ""
    if interaction.guild:
        member = interaction.guild.get_member(target.id)
        if member:
            avatar_url = member.display_avatar.url
    if not avatar_url:
        avatar_url = target.avatar.url if target.avatar else None

    # ‚úÖ Dotabuff —Å—Å—ã–ª–∫–∞
    dotabuff_link = ""
    if steam_id:
        account_id = get_dotabuff_account_id(steam_id)
        if account_id:
            dotabuff_link = f"[Dotabuff](https://www.dotabuff.com/players/{account_id})"
        else:
            dotabuff_link = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π SteamID"
    else:
        dotabuff_link = "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π embed
    embed = discord.Embed(
        title=f"üéñÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {target.display_name}",
        color=discord.Color.blue()  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    )

    if avatar_url:
        embed.set_thumbnail(url=avatar_url)

    embed.add_field(name="üë§ –ù–∏–∫–Ω–µ–π–º", value=target.mention, inline=True)
    embed.add_field(name="üéÆ SteamID", value=f"`{steam_id}`" if steam_id and steam_id != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω", inline=True)
    embed.add_field(name="üîó Dotabuff", value=dotabuff_link, inline=True)  # ‚úÖ –ù–æ–≤—ã–π field —Å —Å—Å—ã–ª–∫–æ–π
    embed.add_field(name="üë• –ö–æ–º–∞–Ω–¥–∞", value=team_name, inline=True)
    embed.add_field(name="üèÜ –†–∞–Ω–≥", value=rank_display, inline=False)
    embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"{await get_balance(target.id)} –ø–æ–∏–Ω—Ç–æ–≤", inline=True)

    embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target.id}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π embed
    final_embed = embed
    msg = await interaction.original_response()
    await msg.edit(content=None, embed=final_embed)


@bot.tree.command(name="kick", description="–ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã")
@app_commands.describe(user="–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å")
async def kick_cmd(interaction: discord.Interaction, user: discord.Member):
    team = await get_user_team(interaction.user.id)
    if not team:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        return

    if str(interaction.user.id) != team["leader_id"]:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤.", ephemeral=True)
        return

    if str(user.id) == team["leader_id"]:
        await interaction.response.send_message("‚ùå –õ–∏–¥–µ—Ä–∞ –Ω–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Ä–µ–∞–ª—å–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ
    invite_data = supabase.table("team_invites").select("status").eq("team_id", team["id"]).eq("user_id", str(user.id)).execute().data
    if not invite_data:
        await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        return

    invite_status = invite_data[0]["status"]
    if invite_status not in ("pending", "accepted"):
        await interaction.response.send_message(f"‚ùå {user.mention} —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ (—Å—Ç–∞—Ç—É—Å: {invite_status}).", ephemeral=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    supabase.table("team_invites").update({"status": "left"}).eq("team_id", team["id"]).eq("user_id", str(user.id)).execute()
    
    # Clear player slot
    team = supabase.table("teams").select("*").eq("id", team["id"]).execute().data[0]
    updates = {}
    for i in range(1, 6):
        if team[f"player{i}_id"] == str(user.id):
            updates[f"player{i}_id"] = None
            break
    if updates:
        supabase.table("teams").update(updates).eq("id", team["id"]).execute()
    
    # –£–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
    guild = interaction.guild
    if guild:
        await remove_team_role(guild, user, team["name"])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    try:
        await user.send(f"‚ùå –í—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã **{team['name']}** –ª–∏–¥–µ—Ä–æ–º <@{interaction.user.id}>.")
    except discord.Forbidden:
        pass

    await interaction.response.send_message(f"‚úÖ –ò–≥—Ä–æ–∫ {user.mention} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã **{team['name']}**.", ephemeral=True)





@bot.tree.command(name="leave", description="–ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É")
async def leave_cmd(interaction: discord.Interaction):
    team = await get_user_team(interaction.user.id)
    if not team:
        await interaction.response.send_message("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        return
    if team["leader_id"] == str(interaction.user.id):
        await interaction.response.send_message("–õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É. –†–∞—Å–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ /delete_team.", ephemeral=True)
        return

    await remove_from_team(interaction.user.id)

    # –£–±–∏—Ä–∞–µ–º —Ä–æ–ª—å
    guild = interaction.guild
    if guild:
        member = interaction.guild.get_member(interaction.user.id)
        if member:
            await remove_team_role(guild, member, team["name"])

    await interaction.response.send_message("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)

    leader = bot.get_user(int(team["leader_id"]))
    if leader:
        try:
            await safe_send(leader, content=f"<@{interaction.user.id}> –ø–æ–∫–∏–Ω—É–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É (ID: {team['id']}).")
        except discord.Forbidden:
            pass



@bot.tree.command(name="delete_team", description="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É")
async def delete_team_cmd(interaction: discord.Interaction):
    team = await get_user_team(interaction.user.id)
    if not team:
        await interaction.response.send_message("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        return
    if str(interaction.user.id) != team["leader_id"]:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
        return

    # Disable buttons on public team announcement message
    if team.get("is_public") and team.get("announcement_message_id"):
        channel = bot.get_channel(int(TEAM_ANNOUNCEMENT_CHANNEL or interaction.channel_id))
        message = await channel.fetch_message(int(team["announcement_message_id"]))
        embed = message.embeds[0] if message.embeds else discord.Embed(
            title=f"–ö–æ–º–∞–Ω–¥–∞: {team['name']}",
            description="–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞.",
            color=discord.Color.red()
        )
        embed.set_footer(text=f"team:{team['id']}")
        await message.edit(embed=embed, view=discord.ui.View())

    # Delete team_invites first to avoid foreign key constraint violation
    supabase.table("team_invites").delete().eq("team_id", team["id"]).execute()
    # Now delete the team
    supabase.table("teams").delete().eq("id", team["id"]).execute()

    # Remove team roles
    guild = interaction.guild
    if guild:
        await remove_team_role_from_all(guild, team["name"])

    await interaction.response.send_message(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ **{team['name']}** –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)



@app_commands.default_permissions(manage_guild=True)
@bot.tree.command(name="cleanup_db", description="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
@app_commands.describe(days="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π")
@admin_only
async def cleanup_db_cmd(interaction: discord.Interaction, days: int = 30):
    if days <= 0:
        await interaction.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", ephemeral=True)
        return
    threshold = int(time.time()) - days * 86400
    try:
        supabase.table("matches").delete().lt("created_at", threshold).in_("status", ["settled", "cancelled"]).execute()
        supabase.table("duels").delete().lt("created_at", threshold).in_("status", ["settled", "cancelled"]).execute()
        supabase.table("teams").delete().lt("created_at", threshold).eq("status", "pending").execute()
        supabase.table("team_invites").delete().lt("created_at", threshold).execute()
        supabase.table("duel_invites").delete().lt("created_at", threshold).execute()
        await interaction.response.send_message(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π.", ephemeral=True)
    except Exception as e:
        logger.error(f"Error cleaning up database: {e}")
        await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)


@bot.event
async def on_ready():
    logger.info(f'{bot.user} has logged in!')
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è persistent views (dummy args)
    bot.add_view(TeamInviteView(0, 0))
    bot.add_view(DuelInviteView(0, 0))
    bot.add_view(PublicDuelView(0, 0))
    bot.add_view(JoinTeamView(0))
    bot.add_view(RegisterView())
    # ‚úÖ Dummy –¥–ª—è ModeratorDuelView —Å placeholder custom_id
    dummy_mod_view = ModeratorDuelView(0, "0")
    bot.add_view(dummy_mod_view)
    try:
        synced = await bot.tree.sync()
        logger.info(f'Synced {len(synced)} command(s)')
    except Exception as e:
        logger.error(f'Failed to sync commands: {e}')


if __name__ == "__main__":
    bot.run(DISCORD_BOT_TOKEN)
